Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> declaration_list
Rule 2     var_declaration -> type_specifier ID SEMICOLON
Rule 3     var_declaration -> type_specifier ID EQUAL NUMBER SEMICOLON
Rule 4     var_declaration -> type_specifier ID EQUAL var SEMICOLON
Rule 5     var_declaration -> type_specifier ID COMMA ID SEMICOLON
Rule 6     var_declaration -> type_specifier ID LBRACKET NUMBER RBRACKET SEMICOLON
Rule 7     fun_declaration -> type_specifier ID LPAREN params RPAREN compount_stmt
Rule 8     params -> param_list
Rule 9     params -> VOID
Rule 10    param_list -> param_list COMMA param
Rule 11    param_list -> param
Rule 12    param_list -> empty
Rule 13    type_specifier -> INT
Rule 14    type_specifier -> VOID
Rule 15    type_specifier -> STRING
Rule 16    param -> type_specifier ID
Rule 17    param -> type_specifier ID LBRACKET RBRACKET
Rule 18    compount_stmt -> LBLOCK local_declarations statement_list RBLOCK
Rule 19    local_declarations -> local_declarations var_declaration
Rule 20    local_declarations -> empty
Rule 21    statement_list -> statement_list statement
Rule 22    statement_list -> empty
Rule 23    statement -> expression_stmt
Rule 24    statement -> compount_stmt
Rule 25    statement -> selection_stmt
Rule 26    statement -> iteration_stmt
Rule 27    statement -> return_stmt
Rule 28    expression_stmt -> expression SEMICOLON
Rule 29    expression_stmt -> SEMICOLON
Rule 30    expression_stmt -> COUT L_SHIFT QUOTES ID QUOTES SEMICOLON
Rule 31    expression_stmt -> COUT L_SHIFT QUOTES ID QUOTES L_SHIFT ENDL SEMICOLON
Rule 32    expression_stmt -> COUT L_SHIFT STRING SEMICOLON
Rule 33    expression_stmt -> COUT L_SHIFT STRING L_SHIFT ENDL SEMICOLON
Rule 34    expression_stmt -> COUT L_SHIFT var SEMICOLON
Rule 35    expression_stmt -> COUT L_SHIFT var L_SHIFT ENDL SEMICOLON
Rule 36    expression_stmt -> COUT L_SHIFT var L_SHIFT var SEMICOLON
Rule 37    expression_stmt -> COUT L_SHIFT var L_SHIFT var L_SHIFT ENDL SEMICOLON
Rule 38    expression_stmt -> CIN R_SHIFT var SEMICOLON
Rule 39    expression_stmt -> CIN R_SHIFT var R_SHIFT var SEMICOLON
Rule 40    expression_stmt -> ID PLUSPLUS
Rule 41    expression_stmt -> PLUSPLUS ID
Rule 42    expression_stmt -> ID MINUSMINUS
Rule 43    expression_stmt -> MINUSMINUS ID
Rule 44    selection_stmt -> IF LPAREN expression RPAREN statement
Rule 45    selection_stmt -> IF LPAREN expression RPAREN statement ELSE statement
Rule 46    iteration_stmt -> WHILE LPAREN expression RPAREN statement
Rule 47    iteration_stmt -> <empty>
Rule 48    iteration_stmt -> FOR LPAREN var SEMICOLON expression SEMICOLON var MINUSMINUS RPAREN statement
Rule 49    iteration_stmt -> FOR LPAREN var SEMICOLON expression SEMICOLON expression RPAREN statement
Rule 50    iteration_stmt -> FOR LPAREN var SEMICOLON expression SEMICOLON var PLUSPLUS RPAREN statement
Rule 51    iteration_stmt -> FOR LPAREN var SEMICOLON expression SEMICOLON PLUSPLUS var RPAREN statement
Rule 52    iteration_stmt -> FOR LPAREN var SEMICOLON expression SEMICOLON MINUSMINUS var RPAREN statement
Rule 53    return_stmt -> RETURN SEMICOLON
Rule 54    return_stmt -> RETURN expression SEMICOLON
Rule 55    expression -> var EQUAL expression
Rule 56    expression -> simple_expression
Rule 57    declaration_list -> declaration_list declaration
Rule 58    declaration_list -> declaration
Rule 59    declaration -> var_declaration
Rule 60    declaration -> HASH INCLUDE LESS_THAN ID GREATER_THAN
Rule 61    declaration -> fun_declaration
Rule 62    declaration -> USING NAMESPACE STD SEMICOLON
Rule 63    var -> ID
Rule 64    var -> ID LBRACKET expression RBRACKET
Rule 65    simple_expression -> additive_expression relop additive_expression
Rule 66    simple_expression -> additive_expression
Rule 67    relop -> LESS_THAN
Rule 68    relop -> LESS_OR_EQUAL
Rule 69    relop -> GREATER_THAN
Rule 70    relop -> GREATEREQUAL
Rule 71    relop -> DEQUAL
Rule 72    relop -> DISTINT
Rule 73    relop -> QUOTES
Rule 74    additive_expression -> additive_expression addop term
Rule 75    additive_expression -> term
Rule 76    addop -> PLUS
Rule 77    addop -> MINUS
Rule 78    term -> term mulop factor
Rule 79    term -> factor
Rule 80    mulop -> TIMES
Rule 81    mulop -> DIVIDE
Rule 82    factor -> LPAREN expression RPAREN
Rule 83    factor -> var
Rule 84    factor -> call
Rule 85    factor -> NUMBER
Rule 86    call -> ID LPAREN args RPAREN
Rule 87    args -> args_list
Rule 88    args -> empty
Rule 89    args_list -> args_list COMMA expression
Rule 90    args_list -> expression
Rule 91    empty -> <empty>

Terminals, with rules where they appear

CIN                  : 38 39
COMMA                : 5 10 89
COUT                 : 30 31 32 33 34 35 36 37
DEQUAL               : 71
DISTINT              : 72
DIVIDE               : 81
ELSE                 : 45
ENDL                 : 31 33 35 37
EQUAL                : 3 4 55
FOR                  : 48 49 50 51 52
GREATEREQUAL         : 70
GREATER_THAN         : 60 69
HASH                 : 60
ID                   : 2 3 4 5 5 6 7 16 17 30 31 40 41 42 43 60 63 64 86
IF                   : 44 45
INCLUDE              : 60
INT                  : 13
LBLOCK               : 18
LBRACKET             : 6 17 64
LESS_OR_EQUAL        : 68
LESS_THAN            : 60 67
LPAREN               : 7 44 45 46 48 49 50 51 52 82 86
L_SHIFT              : 30 31 31 32 33 33 34 35 35 36 36 37 37 37
MINUS                : 77
MINUSMINUS           : 42 43 48 52
NAMESPACE            : 62
NUMBER               : 3 6 85
PLUS                 : 76
PLUSPLUS             : 40 41 50 51
QUOTES               : 30 30 31 31 73
RBLOCK               : 18
RBRACKET             : 6 17 64
RETURN               : 53 54
RPAREN               : 7 44 45 46 48 49 50 51 52 82 86
R_SHIFT              : 38 39 39
SEMICOLON            : 2 3 4 5 6 28 29 30 31 32 33 34 35 36 37 38 39 48 48 49 49 50 50 51 51 52 52 53 54 62
STD                  : 62
STRING               : 15 32 33
TIMES                : 80
USING                : 62
VOID                 : 9 14
WHILE                : 46
error                : 

Nonterminals, with rules where they appear

additive_expression  : 65 65 66 74
addop                : 74
args                 : 86
args_list            : 87 89
call                 : 84
compount_stmt        : 7 24
declaration          : 57 58
declaration_list     : 1 57
empty                : 12 20 22 88
expression           : 28 44 45 46 48 49 49 50 51 52 54 55 64 82 89 90
expression_stmt      : 23
factor               : 78 79
fun_declaration      : 61
iteration_stmt       : 26
local_declarations   : 18 19
mulop                : 78
param                : 10 11
param_list           : 8 10
params               : 7
program              : 0
relop                : 65
return_stmt          : 27
selection_stmt       : 25
simple_expression    : 56
statement            : 21 44 45 45 46 48 49 50 51 52
statement_list       : 18 21
term                 : 74 75 78
type_specifier       : 2 3 4 5 6 7 16 17
var                  : 4 34 35 36 36 37 37 38 39 39 48 48 49 50 50 51 51 52 52 55 83
var_declaration      : 19 59

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . declaration_list
    (57) declaration_list -> . declaration_list declaration
    (58) declaration_list -> . declaration
    (59) declaration -> . var_declaration
    (60) declaration -> . HASH INCLUDE LESS_THAN ID GREATER_THAN
    (61) declaration -> . fun_declaration
    (62) declaration -> . USING NAMESPACE STD SEMICOLON
    (2) var_declaration -> . type_specifier ID SEMICOLON
    (3) var_declaration -> . type_specifier ID EQUAL NUMBER SEMICOLON
    (4) var_declaration -> . type_specifier ID EQUAL var SEMICOLON
    (5) var_declaration -> . type_specifier ID COMMA ID SEMICOLON
    (6) var_declaration -> . type_specifier ID LBRACKET NUMBER RBRACKET SEMICOLON
    (7) fun_declaration -> . type_specifier ID LPAREN params RPAREN compount_stmt
    (13) type_specifier -> . INT
    (14) type_specifier -> . VOID
    (15) type_specifier -> . STRING

    HASH            shift and go to state 5
    USING           shift and go to state 7
    INT             shift and go to state 9
    VOID            shift and go to state 10
    STRING          shift and go to state 11

    program                        shift and go to state 1
    declaration_list               shift and go to state 2
    declaration                    shift and go to state 3
    var_declaration                shift and go to state 4
    fun_declaration                shift and go to state 6
    type_specifier                 shift and go to state 8

state 1

    (0) S' -> program .



state 2

    (1) program -> declaration_list .
    (57) declaration_list -> declaration_list . declaration
    (59) declaration -> . var_declaration
    (60) declaration -> . HASH INCLUDE LESS_THAN ID GREATER_THAN
    (61) declaration -> . fun_declaration
    (62) declaration -> . USING NAMESPACE STD SEMICOLON
    (2) var_declaration -> . type_specifier ID SEMICOLON
    (3) var_declaration -> . type_specifier ID EQUAL NUMBER SEMICOLON
    (4) var_declaration -> . type_specifier ID EQUAL var SEMICOLON
    (5) var_declaration -> . type_specifier ID COMMA ID SEMICOLON
    (6) var_declaration -> . type_specifier ID LBRACKET NUMBER RBRACKET SEMICOLON
    (7) fun_declaration -> . type_specifier ID LPAREN params RPAREN compount_stmt
    (13) type_specifier -> . INT
    (14) type_specifier -> . VOID
    (15) type_specifier -> . STRING

    $end            reduce using rule 1 (program -> declaration_list .)
    HASH            shift and go to state 5
    USING           shift and go to state 7
    INT             shift and go to state 9
    VOID            shift and go to state 10
    STRING          shift and go to state 11

    declaration                    shift and go to state 12
    var_declaration                shift and go to state 4
    fun_declaration                shift and go to state 6
    type_specifier                 shift and go to state 8

state 3

    (58) declaration_list -> declaration .

    HASH            reduce using rule 58 (declaration_list -> declaration .)
    USING           reduce using rule 58 (declaration_list -> declaration .)
    INT             reduce using rule 58 (declaration_list -> declaration .)
    VOID            reduce using rule 58 (declaration_list -> declaration .)
    STRING          reduce using rule 58 (declaration_list -> declaration .)
    $end            reduce using rule 58 (declaration_list -> declaration .)


state 4

    (59) declaration -> var_declaration .

    HASH            reduce using rule 59 (declaration -> var_declaration .)
    USING           reduce using rule 59 (declaration -> var_declaration .)
    INT             reduce using rule 59 (declaration -> var_declaration .)
    VOID            reduce using rule 59 (declaration -> var_declaration .)
    STRING          reduce using rule 59 (declaration -> var_declaration .)
    $end            reduce using rule 59 (declaration -> var_declaration .)


state 5

    (60) declaration -> HASH . INCLUDE LESS_THAN ID GREATER_THAN

    INCLUDE         shift and go to state 13


state 6

    (61) declaration -> fun_declaration .

    HASH            reduce using rule 61 (declaration -> fun_declaration .)
    USING           reduce using rule 61 (declaration -> fun_declaration .)
    INT             reduce using rule 61 (declaration -> fun_declaration .)
    VOID            reduce using rule 61 (declaration -> fun_declaration .)
    STRING          reduce using rule 61 (declaration -> fun_declaration .)
    $end            reduce using rule 61 (declaration -> fun_declaration .)


state 7

    (62) declaration -> USING . NAMESPACE STD SEMICOLON

    NAMESPACE       shift and go to state 14


state 8

    (2) var_declaration -> type_specifier . ID SEMICOLON
    (3) var_declaration -> type_specifier . ID EQUAL NUMBER SEMICOLON
    (4) var_declaration -> type_specifier . ID EQUAL var SEMICOLON
    (5) var_declaration -> type_specifier . ID COMMA ID SEMICOLON
    (6) var_declaration -> type_specifier . ID LBRACKET NUMBER RBRACKET SEMICOLON
    (7) fun_declaration -> type_specifier . ID LPAREN params RPAREN compount_stmt

    ID              shift and go to state 15


state 9

    (13) type_specifier -> INT .

    ID              reduce using rule 13 (type_specifier -> INT .)


state 10

    (14) type_specifier -> VOID .

    ID              reduce using rule 14 (type_specifier -> VOID .)


state 11

    (15) type_specifier -> STRING .

    ID              reduce using rule 15 (type_specifier -> STRING .)


state 12

    (57) declaration_list -> declaration_list declaration .

    HASH            reduce using rule 57 (declaration_list -> declaration_list declaration .)
    USING           reduce using rule 57 (declaration_list -> declaration_list declaration .)
    INT             reduce using rule 57 (declaration_list -> declaration_list declaration .)
    VOID            reduce using rule 57 (declaration_list -> declaration_list declaration .)
    STRING          reduce using rule 57 (declaration_list -> declaration_list declaration .)
    $end            reduce using rule 57 (declaration_list -> declaration_list declaration .)


state 13

    (60) declaration -> HASH INCLUDE . LESS_THAN ID GREATER_THAN

    LESS_THAN       shift and go to state 16


state 14

    (62) declaration -> USING NAMESPACE . STD SEMICOLON

    STD             shift and go to state 17


state 15

    (2) var_declaration -> type_specifier ID . SEMICOLON
    (3) var_declaration -> type_specifier ID . EQUAL NUMBER SEMICOLON
    (4) var_declaration -> type_specifier ID . EQUAL var SEMICOLON
    (5) var_declaration -> type_specifier ID . COMMA ID SEMICOLON
    (6) var_declaration -> type_specifier ID . LBRACKET NUMBER RBRACKET SEMICOLON
    (7) fun_declaration -> type_specifier ID . LPAREN params RPAREN compount_stmt

    SEMICOLON       shift and go to state 18
    EQUAL           shift and go to state 19
    COMMA           shift and go to state 20
    LBRACKET        shift and go to state 21
    LPAREN          shift and go to state 22


state 16

    (60) declaration -> HASH INCLUDE LESS_THAN . ID GREATER_THAN

    ID              shift and go to state 23


state 17

    (62) declaration -> USING NAMESPACE STD . SEMICOLON

    SEMICOLON       shift and go to state 24


state 18

    (2) var_declaration -> type_specifier ID SEMICOLON .

    HASH            reduce using rule 2 (var_declaration -> type_specifier ID SEMICOLON .)
    USING           reduce using rule 2 (var_declaration -> type_specifier ID SEMICOLON .)
    INT             reduce using rule 2 (var_declaration -> type_specifier ID SEMICOLON .)
    VOID            reduce using rule 2 (var_declaration -> type_specifier ID SEMICOLON .)
    STRING          reduce using rule 2 (var_declaration -> type_specifier ID SEMICOLON .)
    $end            reduce using rule 2 (var_declaration -> type_specifier ID SEMICOLON .)
    RBLOCK          reduce using rule 2 (var_declaration -> type_specifier ID SEMICOLON .)
    SEMICOLON       reduce using rule 2 (var_declaration -> type_specifier ID SEMICOLON .)
    COUT            reduce using rule 2 (var_declaration -> type_specifier ID SEMICOLON .)
    CIN             reduce using rule 2 (var_declaration -> type_specifier ID SEMICOLON .)
    ID              reduce using rule 2 (var_declaration -> type_specifier ID SEMICOLON .)
    PLUSPLUS        reduce using rule 2 (var_declaration -> type_specifier ID SEMICOLON .)
    MINUSMINUS      reduce using rule 2 (var_declaration -> type_specifier ID SEMICOLON .)
    LBLOCK          reduce using rule 2 (var_declaration -> type_specifier ID SEMICOLON .)
    IF              reduce using rule 2 (var_declaration -> type_specifier ID SEMICOLON .)
    WHILE           reduce using rule 2 (var_declaration -> type_specifier ID SEMICOLON .)
    FOR             reduce using rule 2 (var_declaration -> type_specifier ID SEMICOLON .)
    RETURN          reduce using rule 2 (var_declaration -> type_specifier ID SEMICOLON .)
    LPAREN          reduce using rule 2 (var_declaration -> type_specifier ID SEMICOLON .)
    NUMBER          reduce using rule 2 (var_declaration -> type_specifier ID SEMICOLON .)


state 19

    (3) var_declaration -> type_specifier ID EQUAL . NUMBER SEMICOLON
    (4) var_declaration -> type_specifier ID EQUAL . var SEMICOLON
    (63) var -> . ID
    (64) var -> . ID LBRACKET expression RBRACKET

    NUMBER          shift and go to state 26
    ID              shift and go to state 25

    var                            shift and go to state 27

state 20

    (5) var_declaration -> type_specifier ID COMMA . ID SEMICOLON

    ID              shift and go to state 28


state 21

    (6) var_declaration -> type_specifier ID LBRACKET . NUMBER RBRACKET SEMICOLON

    NUMBER          shift and go to state 29


state 22

    (7) fun_declaration -> type_specifier ID LPAREN . params RPAREN compount_stmt
    (8) params -> . param_list
    (9) params -> . VOID
    (10) param_list -> . param_list COMMA param
    (11) param_list -> . param
    (12) param_list -> . empty
    (16) param -> . type_specifier ID
    (17) param -> . type_specifier ID LBRACKET RBRACKET
    (91) empty -> .
    (13) type_specifier -> . INT
    (14) type_specifier -> . VOID
    (15) type_specifier -> . STRING

    VOID            shift and go to state 33
    COMMA           reduce using rule 91 (empty -> .)
    RPAREN          reduce using rule 91 (empty -> .)
    INT             shift and go to state 9
    STRING          shift and go to state 11

    type_specifier                 shift and go to state 30
    params                         shift and go to state 31
    param_list                     shift and go to state 32
    param                          shift and go to state 34
    empty                          shift and go to state 35

state 23

    (60) declaration -> HASH INCLUDE LESS_THAN ID . GREATER_THAN

    GREATER_THAN    shift and go to state 36


state 24

    (62) declaration -> USING NAMESPACE STD SEMICOLON .

    HASH            reduce using rule 62 (declaration -> USING NAMESPACE STD SEMICOLON .)
    USING           reduce using rule 62 (declaration -> USING NAMESPACE STD SEMICOLON .)
    INT             reduce using rule 62 (declaration -> USING NAMESPACE STD SEMICOLON .)
    VOID            reduce using rule 62 (declaration -> USING NAMESPACE STD SEMICOLON .)
    STRING          reduce using rule 62 (declaration -> USING NAMESPACE STD SEMICOLON .)
    $end            reduce using rule 62 (declaration -> USING NAMESPACE STD SEMICOLON .)


state 25

    (63) var -> ID .
    (64) var -> ID . LBRACKET expression RBRACKET

    SEMICOLON       reduce using rule 63 (var -> ID .)
    L_SHIFT         reduce using rule 63 (var -> ID .)
    R_SHIFT         reduce using rule 63 (var -> ID .)
    RPAREN          reduce using rule 63 (var -> ID .)
    LBRACKET        shift and go to state 37


state 26

    (3) var_declaration -> type_specifier ID EQUAL NUMBER . SEMICOLON

    SEMICOLON       shift and go to state 38


state 27

    (4) var_declaration -> type_specifier ID EQUAL var . SEMICOLON

    SEMICOLON       shift and go to state 39


state 28

    (5) var_declaration -> type_specifier ID COMMA ID . SEMICOLON

    SEMICOLON       shift and go to state 40


state 29

    (6) var_declaration -> type_specifier ID LBRACKET NUMBER . RBRACKET SEMICOLON

    RBRACKET        shift and go to state 41


state 30

    (16) param -> type_specifier . ID
    (17) param -> type_specifier . ID LBRACKET RBRACKET

    ID              shift and go to state 42


state 31

    (7) fun_declaration -> type_specifier ID LPAREN params . RPAREN compount_stmt

    RPAREN          shift and go to state 43


state 32

    (8) params -> param_list .
    (10) param_list -> param_list . COMMA param

    RPAREN          reduce using rule 8 (params -> param_list .)
    COMMA           shift and go to state 44


state 33

    (9) params -> VOID .
    (14) type_specifier -> VOID .

    RPAREN          reduce using rule 9 (params -> VOID .)
    ID              reduce using rule 14 (type_specifier -> VOID .)


state 34

    (11) param_list -> param .

    COMMA           reduce using rule 11 (param_list -> param .)
    RPAREN          reduce using rule 11 (param_list -> param .)


state 35

    (12) param_list -> empty .

    COMMA           reduce using rule 12 (param_list -> empty .)
    RPAREN          reduce using rule 12 (param_list -> empty .)


state 36

    (60) declaration -> HASH INCLUDE LESS_THAN ID GREATER_THAN .

    HASH            reduce using rule 60 (declaration -> HASH INCLUDE LESS_THAN ID GREATER_THAN .)
    USING           reduce using rule 60 (declaration -> HASH INCLUDE LESS_THAN ID GREATER_THAN .)
    INT             reduce using rule 60 (declaration -> HASH INCLUDE LESS_THAN ID GREATER_THAN .)
    VOID            reduce using rule 60 (declaration -> HASH INCLUDE LESS_THAN ID GREATER_THAN .)
    STRING          reduce using rule 60 (declaration -> HASH INCLUDE LESS_THAN ID GREATER_THAN .)
    $end            reduce using rule 60 (declaration -> HASH INCLUDE LESS_THAN ID GREATER_THAN .)


state 37

    (64) var -> ID LBRACKET . expression RBRACKET
    (55) expression -> . var EQUAL expression
    (56) expression -> . simple_expression
    (63) var -> . ID
    (64) var -> . ID LBRACKET expression RBRACKET
    (65) simple_expression -> . additive_expression relop additive_expression
    (66) simple_expression -> . additive_expression
    (74) additive_expression -> . additive_expression addop term
    (75) additive_expression -> . term
    (78) term -> . term mulop factor
    (79) term -> . factor
    (82) factor -> . LPAREN expression RPAREN
    (83) factor -> . var
    (84) factor -> . call
    (85) factor -> . NUMBER
    (86) call -> . ID LPAREN args RPAREN

    ID              shift and go to state 45
    LPAREN          shift and go to state 52
    NUMBER          shift and go to state 54

    expression                     shift and go to state 46
    var                            shift and go to state 47
    simple_expression              shift and go to state 48
    additive_expression            shift and go to state 49
    term                           shift and go to state 50
    factor                         shift and go to state 51
    call                           shift and go to state 53

state 38

    (3) var_declaration -> type_specifier ID EQUAL NUMBER SEMICOLON .

    HASH            reduce using rule 3 (var_declaration -> type_specifier ID EQUAL NUMBER SEMICOLON .)
    USING           reduce using rule 3 (var_declaration -> type_specifier ID EQUAL NUMBER SEMICOLON .)
    INT             reduce using rule 3 (var_declaration -> type_specifier ID EQUAL NUMBER SEMICOLON .)
    VOID            reduce using rule 3 (var_declaration -> type_specifier ID EQUAL NUMBER SEMICOLON .)
    STRING          reduce using rule 3 (var_declaration -> type_specifier ID EQUAL NUMBER SEMICOLON .)
    $end            reduce using rule 3 (var_declaration -> type_specifier ID EQUAL NUMBER SEMICOLON .)
    RBLOCK          reduce using rule 3 (var_declaration -> type_specifier ID EQUAL NUMBER SEMICOLON .)
    SEMICOLON       reduce using rule 3 (var_declaration -> type_specifier ID EQUAL NUMBER SEMICOLON .)
    COUT            reduce using rule 3 (var_declaration -> type_specifier ID EQUAL NUMBER SEMICOLON .)
    CIN             reduce using rule 3 (var_declaration -> type_specifier ID EQUAL NUMBER SEMICOLON .)
    ID              reduce using rule 3 (var_declaration -> type_specifier ID EQUAL NUMBER SEMICOLON .)
    PLUSPLUS        reduce using rule 3 (var_declaration -> type_specifier ID EQUAL NUMBER SEMICOLON .)
    MINUSMINUS      reduce using rule 3 (var_declaration -> type_specifier ID EQUAL NUMBER SEMICOLON .)
    LBLOCK          reduce using rule 3 (var_declaration -> type_specifier ID EQUAL NUMBER SEMICOLON .)
    IF              reduce using rule 3 (var_declaration -> type_specifier ID EQUAL NUMBER SEMICOLON .)
    WHILE           reduce using rule 3 (var_declaration -> type_specifier ID EQUAL NUMBER SEMICOLON .)
    FOR             reduce using rule 3 (var_declaration -> type_specifier ID EQUAL NUMBER SEMICOLON .)
    RETURN          reduce using rule 3 (var_declaration -> type_specifier ID EQUAL NUMBER SEMICOLON .)
    LPAREN          reduce using rule 3 (var_declaration -> type_specifier ID EQUAL NUMBER SEMICOLON .)
    NUMBER          reduce using rule 3 (var_declaration -> type_specifier ID EQUAL NUMBER SEMICOLON .)


state 39

    (4) var_declaration -> type_specifier ID EQUAL var SEMICOLON .

    HASH            reduce using rule 4 (var_declaration -> type_specifier ID EQUAL var SEMICOLON .)
    USING           reduce using rule 4 (var_declaration -> type_specifier ID EQUAL var SEMICOLON .)
    INT             reduce using rule 4 (var_declaration -> type_specifier ID EQUAL var SEMICOLON .)
    VOID            reduce using rule 4 (var_declaration -> type_specifier ID EQUAL var SEMICOLON .)
    STRING          reduce using rule 4 (var_declaration -> type_specifier ID EQUAL var SEMICOLON .)
    $end            reduce using rule 4 (var_declaration -> type_specifier ID EQUAL var SEMICOLON .)
    RBLOCK          reduce using rule 4 (var_declaration -> type_specifier ID EQUAL var SEMICOLON .)
    SEMICOLON       reduce using rule 4 (var_declaration -> type_specifier ID EQUAL var SEMICOLON .)
    COUT            reduce using rule 4 (var_declaration -> type_specifier ID EQUAL var SEMICOLON .)
    CIN             reduce using rule 4 (var_declaration -> type_specifier ID EQUAL var SEMICOLON .)
    ID              reduce using rule 4 (var_declaration -> type_specifier ID EQUAL var SEMICOLON .)
    PLUSPLUS        reduce using rule 4 (var_declaration -> type_specifier ID EQUAL var SEMICOLON .)
    MINUSMINUS      reduce using rule 4 (var_declaration -> type_specifier ID EQUAL var SEMICOLON .)
    LBLOCK          reduce using rule 4 (var_declaration -> type_specifier ID EQUAL var SEMICOLON .)
    IF              reduce using rule 4 (var_declaration -> type_specifier ID EQUAL var SEMICOLON .)
    WHILE           reduce using rule 4 (var_declaration -> type_specifier ID EQUAL var SEMICOLON .)
    FOR             reduce using rule 4 (var_declaration -> type_specifier ID EQUAL var SEMICOLON .)
    RETURN          reduce using rule 4 (var_declaration -> type_specifier ID EQUAL var SEMICOLON .)
    LPAREN          reduce using rule 4 (var_declaration -> type_specifier ID EQUAL var SEMICOLON .)
    NUMBER          reduce using rule 4 (var_declaration -> type_specifier ID EQUAL var SEMICOLON .)


state 40

    (5) var_declaration -> type_specifier ID COMMA ID SEMICOLON .

    HASH            reduce using rule 5 (var_declaration -> type_specifier ID COMMA ID SEMICOLON .)
    USING           reduce using rule 5 (var_declaration -> type_specifier ID COMMA ID SEMICOLON .)
    INT             reduce using rule 5 (var_declaration -> type_specifier ID COMMA ID SEMICOLON .)
    VOID            reduce using rule 5 (var_declaration -> type_specifier ID COMMA ID SEMICOLON .)
    STRING          reduce using rule 5 (var_declaration -> type_specifier ID COMMA ID SEMICOLON .)
    $end            reduce using rule 5 (var_declaration -> type_specifier ID COMMA ID SEMICOLON .)
    RBLOCK          reduce using rule 5 (var_declaration -> type_specifier ID COMMA ID SEMICOLON .)
    SEMICOLON       reduce using rule 5 (var_declaration -> type_specifier ID COMMA ID SEMICOLON .)
    COUT            reduce using rule 5 (var_declaration -> type_specifier ID COMMA ID SEMICOLON .)
    CIN             reduce using rule 5 (var_declaration -> type_specifier ID COMMA ID SEMICOLON .)
    ID              reduce using rule 5 (var_declaration -> type_specifier ID COMMA ID SEMICOLON .)
    PLUSPLUS        reduce using rule 5 (var_declaration -> type_specifier ID COMMA ID SEMICOLON .)
    MINUSMINUS      reduce using rule 5 (var_declaration -> type_specifier ID COMMA ID SEMICOLON .)
    LBLOCK          reduce using rule 5 (var_declaration -> type_specifier ID COMMA ID SEMICOLON .)
    IF              reduce using rule 5 (var_declaration -> type_specifier ID COMMA ID SEMICOLON .)
    WHILE           reduce using rule 5 (var_declaration -> type_specifier ID COMMA ID SEMICOLON .)
    FOR             reduce using rule 5 (var_declaration -> type_specifier ID COMMA ID SEMICOLON .)
    RETURN          reduce using rule 5 (var_declaration -> type_specifier ID COMMA ID SEMICOLON .)
    LPAREN          reduce using rule 5 (var_declaration -> type_specifier ID COMMA ID SEMICOLON .)
    NUMBER          reduce using rule 5 (var_declaration -> type_specifier ID COMMA ID SEMICOLON .)


state 41

    (6) var_declaration -> type_specifier ID LBRACKET NUMBER RBRACKET . SEMICOLON

    SEMICOLON       shift and go to state 55


state 42

    (16) param -> type_specifier ID .
    (17) param -> type_specifier ID . LBRACKET RBRACKET

    COMMA           reduce using rule 16 (param -> type_specifier ID .)
    RPAREN          reduce using rule 16 (param -> type_specifier ID .)
    LBRACKET        shift and go to state 56


state 43

    (7) fun_declaration -> type_specifier ID LPAREN params RPAREN . compount_stmt
    (18) compount_stmt -> . LBLOCK local_declarations statement_list RBLOCK

    LBLOCK          shift and go to state 58

    compount_stmt                  shift and go to state 57

state 44

    (10) param_list -> param_list COMMA . param
    (16) param -> . type_specifier ID
    (17) param -> . type_specifier ID LBRACKET RBRACKET
    (13) type_specifier -> . INT
    (14) type_specifier -> . VOID
    (15) type_specifier -> . STRING

    INT             shift and go to state 9
    VOID            shift and go to state 10
    STRING          shift and go to state 11

    param                          shift and go to state 59
    type_specifier                 shift and go to state 30

state 45

    (63) var -> ID .
    (64) var -> ID . LBRACKET expression RBRACKET
    (86) call -> ID . LPAREN args RPAREN

    EQUAL           reduce using rule 63 (var -> ID .)
    TIMES           reduce using rule 63 (var -> ID .)
    DIVIDE          reduce using rule 63 (var -> ID .)
    LESS_THAN       reduce using rule 63 (var -> ID .)
    LESS_OR_EQUAL   reduce using rule 63 (var -> ID .)
    GREATER_THAN    reduce using rule 63 (var -> ID .)
    GREATEREQUAL    reduce using rule 63 (var -> ID .)
    DEQUAL          reduce using rule 63 (var -> ID .)
    DISTINT         reduce using rule 63 (var -> ID .)
    QUOTES          reduce using rule 63 (var -> ID .)
    PLUS            reduce using rule 63 (var -> ID .)
    MINUS           reduce using rule 63 (var -> ID .)
    RBRACKET        reduce using rule 63 (var -> ID .)
    RPAREN          reduce using rule 63 (var -> ID .)
    COMMA           reduce using rule 63 (var -> ID .)
    SEMICOLON       reduce using rule 63 (var -> ID .)
    MINUSMINUS      reduce using rule 63 (var -> ID .)
    PLUSPLUS        reduce using rule 63 (var -> ID .)
    LBRACKET        shift and go to state 37
    LPAREN          shift and go to state 60


state 46

    (64) var -> ID LBRACKET expression . RBRACKET

    RBRACKET        shift and go to state 61


state 47

    (55) expression -> var . EQUAL expression
    (83) factor -> var .

    EQUAL           shift and go to state 62
    TIMES           reduce using rule 83 (factor -> var .)
    DIVIDE          reduce using rule 83 (factor -> var .)
    LESS_THAN       reduce using rule 83 (factor -> var .)
    LESS_OR_EQUAL   reduce using rule 83 (factor -> var .)
    GREATER_THAN    reduce using rule 83 (factor -> var .)
    GREATEREQUAL    reduce using rule 83 (factor -> var .)
    DEQUAL          reduce using rule 83 (factor -> var .)
    DISTINT         reduce using rule 83 (factor -> var .)
    QUOTES          reduce using rule 83 (factor -> var .)
    PLUS            reduce using rule 83 (factor -> var .)
    MINUS           reduce using rule 83 (factor -> var .)
    RBRACKET        reduce using rule 83 (factor -> var .)
    RPAREN          reduce using rule 83 (factor -> var .)
    COMMA           reduce using rule 83 (factor -> var .)
    SEMICOLON       reduce using rule 83 (factor -> var .)


state 48

    (56) expression -> simple_expression .

    RBRACKET        reduce using rule 56 (expression -> simple_expression .)
    RPAREN          reduce using rule 56 (expression -> simple_expression .)
    COMMA           reduce using rule 56 (expression -> simple_expression .)
    SEMICOLON       reduce using rule 56 (expression -> simple_expression .)


state 49

    (65) simple_expression -> additive_expression . relop additive_expression
    (66) simple_expression -> additive_expression .
    (74) additive_expression -> additive_expression . addop term
    (67) relop -> . LESS_THAN
    (68) relop -> . LESS_OR_EQUAL
    (69) relop -> . GREATER_THAN
    (70) relop -> . GREATEREQUAL
    (71) relop -> . DEQUAL
    (72) relop -> . DISTINT
    (73) relop -> . QUOTES
    (76) addop -> . PLUS
    (77) addop -> . MINUS

    RBRACKET        reduce using rule 66 (simple_expression -> additive_expression .)
    RPAREN          reduce using rule 66 (simple_expression -> additive_expression .)
    COMMA           reduce using rule 66 (simple_expression -> additive_expression .)
    SEMICOLON       reduce using rule 66 (simple_expression -> additive_expression .)
    LESS_THAN       shift and go to state 65
    LESS_OR_EQUAL   shift and go to state 66
    GREATER_THAN    shift and go to state 67
    GREATEREQUAL    shift and go to state 68
    DEQUAL          shift and go to state 69
    DISTINT         shift and go to state 70
    QUOTES          shift and go to state 71
    PLUS            shift and go to state 72
    MINUS           shift and go to state 73

    relop                          shift and go to state 63
    addop                          shift and go to state 64

state 50

    (75) additive_expression -> term .
    (78) term -> term . mulop factor
    (80) mulop -> . TIMES
    (81) mulop -> . DIVIDE

    LESS_THAN       reduce using rule 75 (additive_expression -> term .)
    LESS_OR_EQUAL   reduce using rule 75 (additive_expression -> term .)
    GREATER_THAN    reduce using rule 75 (additive_expression -> term .)
    GREATEREQUAL    reduce using rule 75 (additive_expression -> term .)
    DEQUAL          reduce using rule 75 (additive_expression -> term .)
    DISTINT         reduce using rule 75 (additive_expression -> term .)
    QUOTES          reduce using rule 75 (additive_expression -> term .)
    PLUS            reduce using rule 75 (additive_expression -> term .)
    MINUS           reduce using rule 75 (additive_expression -> term .)
    RBRACKET        reduce using rule 75 (additive_expression -> term .)
    RPAREN          reduce using rule 75 (additive_expression -> term .)
    COMMA           reduce using rule 75 (additive_expression -> term .)
    SEMICOLON       reduce using rule 75 (additive_expression -> term .)
    TIMES           shift and go to state 75
    DIVIDE          shift and go to state 76

    mulop                          shift and go to state 74

state 51

    (79) term -> factor .

    TIMES           reduce using rule 79 (term -> factor .)
    DIVIDE          reduce using rule 79 (term -> factor .)
    LESS_THAN       reduce using rule 79 (term -> factor .)
    LESS_OR_EQUAL   reduce using rule 79 (term -> factor .)
    GREATER_THAN    reduce using rule 79 (term -> factor .)
    GREATEREQUAL    reduce using rule 79 (term -> factor .)
    DEQUAL          reduce using rule 79 (term -> factor .)
    DISTINT         reduce using rule 79 (term -> factor .)
    QUOTES          reduce using rule 79 (term -> factor .)
    PLUS            reduce using rule 79 (term -> factor .)
    MINUS           reduce using rule 79 (term -> factor .)
    RBRACKET        reduce using rule 79 (term -> factor .)
    RPAREN          reduce using rule 79 (term -> factor .)
    COMMA           reduce using rule 79 (term -> factor .)
    SEMICOLON       reduce using rule 79 (term -> factor .)


state 52

    (82) factor -> LPAREN . expression RPAREN
    (55) expression -> . var EQUAL expression
    (56) expression -> . simple_expression
    (63) var -> . ID
    (64) var -> . ID LBRACKET expression RBRACKET
    (65) simple_expression -> . additive_expression relop additive_expression
    (66) simple_expression -> . additive_expression
    (74) additive_expression -> . additive_expression addop term
    (75) additive_expression -> . term
    (78) term -> . term mulop factor
    (79) term -> . factor
    (82) factor -> . LPAREN expression RPAREN
    (83) factor -> . var
    (84) factor -> . call
    (85) factor -> . NUMBER
    (86) call -> . ID LPAREN args RPAREN

    ID              shift and go to state 45
    LPAREN          shift and go to state 52
    NUMBER          shift and go to state 54

    expression                     shift and go to state 77
    var                            shift and go to state 47
    simple_expression              shift and go to state 48
    additive_expression            shift and go to state 49
    term                           shift and go to state 50
    factor                         shift and go to state 51
    call                           shift and go to state 53

state 53

    (84) factor -> call .

    TIMES           reduce using rule 84 (factor -> call .)
    DIVIDE          reduce using rule 84 (factor -> call .)
    LESS_THAN       reduce using rule 84 (factor -> call .)
    LESS_OR_EQUAL   reduce using rule 84 (factor -> call .)
    GREATER_THAN    reduce using rule 84 (factor -> call .)
    GREATEREQUAL    reduce using rule 84 (factor -> call .)
    DEQUAL          reduce using rule 84 (factor -> call .)
    DISTINT         reduce using rule 84 (factor -> call .)
    QUOTES          reduce using rule 84 (factor -> call .)
    PLUS            reduce using rule 84 (factor -> call .)
    MINUS           reduce using rule 84 (factor -> call .)
    RBRACKET        reduce using rule 84 (factor -> call .)
    RPAREN          reduce using rule 84 (factor -> call .)
    COMMA           reduce using rule 84 (factor -> call .)
    SEMICOLON       reduce using rule 84 (factor -> call .)


state 54

    (85) factor -> NUMBER .

    TIMES           reduce using rule 85 (factor -> NUMBER .)
    DIVIDE          reduce using rule 85 (factor -> NUMBER .)
    LESS_THAN       reduce using rule 85 (factor -> NUMBER .)
    LESS_OR_EQUAL   reduce using rule 85 (factor -> NUMBER .)
    GREATER_THAN    reduce using rule 85 (factor -> NUMBER .)
    GREATEREQUAL    reduce using rule 85 (factor -> NUMBER .)
    DEQUAL          reduce using rule 85 (factor -> NUMBER .)
    DISTINT         reduce using rule 85 (factor -> NUMBER .)
    QUOTES          reduce using rule 85 (factor -> NUMBER .)
    PLUS            reduce using rule 85 (factor -> NUMBER .)
    MINUS           reduce using rule 85 (factor -> NUMBER .)
    RBRACKET        reduce using rule 85 (factor -> NUMBER .)
    RPAREN          reduce using rule 85 (factor -> NUMBER .)
    COMMA           reduce using rule 85 (factor -> NUMBER .)
    SEMICOLON       reduce using rule 85 (factor -> NUMBER .)


state 55

    (6) var_declaration -> type_specifier ID LBRACKET NUMBER RBRACKET SEMICOLON .

    HASH            reduce using rule 6 (var_declaration -> type_specifier ID LBRACKET NUMBER RBRACKET SEMICOLON .)
    USING           reduce using rule 6 (var_declaration -> type_specifier ID LBRACKET NUMBER RBRACKET SEMICOLON .)
    INT             reduce using rule 6 (var_declaration -> type_specifier ID LBRACKET NUMBER RBRACKET SEMICOLON .)
    VOID            reduce using rule 6 (var_declaration -> type_specifier ID LBRACKET NUMBER RBRACKET SEMICOLON .)
    STRING          reduce using rule 6 (var_declaration -> type_specifier ID LBRACKET NUMBER RBRACKET SEMICOLON .)
    $end            reduce using rule 6 (var_declaration -> type_specifier ID LBRACKET NUMBER RBRACKET SEMICOLON .)
    RBLOCK          reduce using rule 6 (var_declaration -> type_specifier ID LBRACKET NUMBER RBRACKET SEMICOLON .)
    SEMICOLON       reduce using rule 6 (var_declaration -> type_specifier ID LBRACKET NUMBER RBRACKET SEMICOLON .)
    COUT            reduce using rule 6 (var_declaration -> type_specifier ID LBRACKET NUMBER RBRACKET SEMICOLON .)
    CIN             reduce using rule 6 (var_declaration -> type_specifier ID LBRACKET NUMBER RBRACKET SEMICOLON .)
    ID              reduce using rule 6 (var_declaration -> type_specifier ID LBRACKET NUMBER RBRACKET SEMICOLON .)
    PLUSPLUS        reduce using rule 6 (var_declaration -> type_specifier ID LBRACKET NUMBER RBRACKET SEMICOLON .)
    MINUSMINUS      reduce using rule 6 (var_declaration -> type_specifier ID LBRACKET NUMBER RBRACKET SEMICOLON .)
    LBLOCK          reduce using rule 6 (var_declaration -> type_specifier ID LBRACKET NUMBER RBRACKET SEMICOLON .)
    IF              reduce using rule 6 (var_declaration -> type_specifier ID LBRACKET NUMBER RBRACKET SEMICOLON .)
    WHILE           reduce using rule 6 (var_declaration -> type_specifier ID LBRACKET NUMBER RBRACKET SEMICOLON .)
    FOR             reduce using rule 6 (var_declaration -> type_specifier ID LBRACKET NUMBER RBRACKET SEMICOLON .)
    RETURN          reduce using rule 6 (var_declaration -> type_specifier ID LBRACKET NUMBER RBRACKET SEMICOLON .)
    LPAREN          reduce using rule 6 (var_declaration -> type_specifier ID LBRACKET NUMBER RBRACKET SEMICOLON .)
    NUMBER          reduce using rule 6 (var_declaration -> type_specifier ID LBRACKET NUMBER RBRACKET SEMICOLON .)


state 56

    (17) param -> type_specifier ID LBRACKET . RBRACKET

    RBRACKET        shift and go to state 78


state 57

    (7) fun_declaration -> type_specifier ID LPAREN params RPAREN compount_stmt .

    HASH            reduce using rule 7 (fun_declaration -> type_specifier ID LPAREN params RPAREN compount_stmt .)
    USING           reduce using rule 7 (fun_declaration -> type_specifier ID LPAREN params RPAREN compount_stmt .)
    INT             reduce using rule 7 (fun_declaration -> type_specifier ID LPAREN params RPAREN compount_stmt .)
    VOID            reduce using rule 7 (fun_declaration -> type_specifier ID LPAREN params RPAREN compount_stmt .)
    STRING          reduce using rule 7 (fun_declaration -> type_specifier ID LPAREN params RPAREN compount_stmt .)
    $end            reduce using rule 7 (fun_declaration -> type_specifier ID LPAREN params RPAREN compount_stmt .)


state 58

    (18) compount_stmt -> LBLOCK . local_declarations statement_list RBLOCK
    (19) local_declarations -> . local_declarations var_declaration
    (20) local_declarations -> . empty
    (91) empty -> .

    INT             reduce using rule 91 (empty -> .)
    VOID            reduce using rule 91 (empty -> .)
    STRING          reduce using rule 91 (empty -> .)
    RBLOCK          reduce using rule 91 (empty -> .)
    SEMICOLON       reduce using rule 91 (empty -> .)
    COUT            reduce using rule 91 (empty -> .)
    CIN             reduce using rule 91 (empty -> .)
    ID              reduce using rule 91 (empty -> .)
    PLUSPLUS        reduce using rule 91 (empty -> .)
    MINUSMINUS      reduce using rule 91 (empty -> .)
    LBLOCK          reduce using rule 91 (empty -> .)
    IF              reduce using rule 91 (empty -> .)
    WHILE           reduce using rule 91 (empty -> .)
    FOR             reduce using rule 91 (empty -> .)
    RETURN          reduce using rule 91 (empty -> .)
    LPAREN          reduce using rule 91 (empty -> .)
    NUMBER          reduce using rule 91 (empty -> .)

    local_declarations             shift and go to state 79
    empty                          shift and go to state 80

state 59

    (10) param_list -> param_list COMMA param .

    COMMA           reduce using rule 10 (param_list -> param_list COMMA param .)
    RPAREN          reduce using rule 10 (param_list -> param_list COMMA param .)


state 60

    (86) call -> ID LPAREN . args RPAREN
    (87) args -> . args_list
    (88) args -> . empty
    (89) args_list -> . args_list COMMA expression
    (90) args_list -> . expression
    (91) empty -> .
    (55) expression -> . var EQUAL expression
    (56) expression -> . simple_expression
    (63) var -> . ID
    (64) var -> . ID LBRACKET expression RBRACKET
    (65) simple_expression -> . additive_expression relop additive_expression
    (66) simple_expression -> . additive_expression
    (74) additive_expression -> . additive_expression addop term
    (75) additive_expression -> . term
    (78) term -> . term mulop factor
    (79) term -> . factor
    (82) factor -> . LPAREN expression RPAREN
    (83) factor -> . var
    (84) factor -> . call
    (85) factor -> . NUMBER
    (86) call -> . ID LPAREN args RPAREN

    RPAREN          reduce using rule 91 (empty -> .)
    ID              shift and go to state 45
    LPAREN          shift and go to state 52
    NUMBER          shift and go to state 54

    args                           shift and go to state 81
    args_list                      shift and go to state 82
    empty                          shift and go to state 83
    expression                     shift and go to state 84
    var                            shift and go to state 47
    simple_expression              shift and go to state 48
    additive_expression            shift and go to state 49
    term                           shift and go to state 50
    factor                         shift and go to state 51
    call                           shift and go to state 53

state 61

    (64) var -> ID LBRACKET expression RBRACKET .

    SEMICOLON       reduce using rule 64 (var -> ID LBRACKET expression RBRACKET .)
    EQUAL           reduce using rule 64 (var -> ID LBRACKET expression RBRACKET .)
    TIMES           reduce using rule 64 (var -> ID LBRACKET expression RBRACKET .)
    DIVIDE          reduce using rule 64 (var -> ID LBRACKET expression RBRACKET .)
    LESS_THAN       reduce using rule 64 (var -> ID LBRACKET expression RBRACKET .)
    LESS_OR_EQUAL   reduce using rule 64 (var -> ID LBRACKET expression RBRACKET .)
    GREATER_THAN    reduce using rule 64 (var -> ID LBRACKET expression RBRACKET .)
    GREATEREQUAL    reduce using rule 64 (var -> ID LBRACKET expression RBRACKET .)
    DEQUAL          reduce using rule 64 (var -> ID LBRACKET expression RBRACKET .)
    DISTINT         reduce using rule 64 (var -> ID LBRACKET expression RBRACKET .)
    QUOTES          reduce using rule 64 (var -> ID LBRACKET expression RBRACKET .)
    PLUS            reduce using rule 64 (var -> ID LBRACKET expression RBRACKET .)
    MINUS           reduce using rule 64 (var -> ID LBRACKET expression RBRACKET .)
    RBRACKET        reduce using rule 64 (var -> ID LBRACKET expression RBRACKET .)
    RPAREN          reduce using rule 64 (var -> ID LBRACKET expression RBRACKET .)
    COMMA           reduce using rule 64 (var -> ID LBRACKET expression RBRACKET .)
    L_SHIFT         reduce using rule 64 (var -> ID LBRACKET expression RBRACKET .)
    R_SHIFT         reduce using rule 64 (var -> ID LBRACKET expression RBRACKET .)
    MINUSMINUS      reduce using rule 64 (var -> ID LBRACKET expression RBRACKET .)
    PLUSPLUS        reduce using rule 64 (var -> ID LBRACKET expression RBRACKET .)


state 62

    (55) expression -> var EQUAL . expression
    (55) expression -> . var EQUAL expression
    (56) expression -> . simple_expression
    (63) var -> . ID
    (64) var -> . ID LBRACKET expression RBRACKET
    (65) simple_expression -> . additive_expression relop additive_expression
    (66) simple_expression -> . additive_expression
    (74) additive_expression -> . additive_expression addop term
    (75) additive_expression -> . term
    (78) term -> . term mulop factor
    (79) term -> . factor
    (82) factor -> . LPAREN expression RPAREN
    (83) factor -> . var
    (84) factor -> . call
    (85) factor -> . NUMBER
    (86) call -> . ID LPAREN args RPAREN

    ID              shift and go to state 45
    LPAREN          shift and go to state 52
    NUMBER          shift and go to state 54

    var                            shift and go to state 47
    expression                     shift and go to state 85
    simple_expression              shift and go to state 48
    additive_expression            shift and go to state 49
    term                           shift and go to state 50
    factor                         shift and go to state 51
    call                           shift and go to state 53

state 63

    (65) simple_expression -> additive_expression relop . additive_expression
    (74) additive_expression -> . additive_expression addop term
    (75) additive_expression -> . term
    (78) term -> . term mulop factor
    (79) term -> . factor
    (82) factor -> . LPAREN expression RPAREN
    (83) factor -> . var
    (84) factor -> . call
    (85) factor -> . NUMBER
    (63) var -> . ID
    (64) var -> . ID LBRACKET expression RBRACKET
    (86) call -> . ID LPAREN args RPAREN

    LPAREN          shift and go to state 52
    NUMBER          shift and go to state 54
    ID              shift and go to state 45

    additive_expression            shift and go to state 86
    term                           shift and go to state 50
    factor                         shift and go to state 51
    var                            shift and go to state 87
    call                           shift and go to state 53

state 64

    (74) additive_expression -> additive_expression addop . term
    (78) term -> . term mulop factor
    (79) term -> . factor
    (82) factor -> . LPAREN expression RPAREN
    (83) factor -> . var
    (84) factor -> . call
    (85) factor -> . NUMBER
    (63) var -> . ID
    (64) var -> . ID LBRACKET expression RBRACKET
    (86) call -> . ID LPAREN args RPAREN

    LPAREN          shift and go to state 52
    NUMBER          shift and go to state 54
    ID              shift and go to state 45

    term                           shift and go to state 88
    factor                         shift and go to state 51
    var                            shift and go to state 87
    call                           shift and go to state 53

state 65

    (67) relop -> LESS_THAN .

    LPAREN          reduce using rule 67 (relop -> LESS_THAN .)
    NUMBER          reduce using rule 67 (relop -> LESS_THAN .)
    ID              reduce using rule 67 (relop -> LESS_THAN .)


state 66

    (68) relop -> LESS_OR_EQUAL .

    LPAREN          reduce using rule 68 (relop -> LESS_OR_EQUAL .)
    NUMBER          reduce using rule 68 (relop -> LESS_OR_EQUAL .)
    ID              reduce using rule 68 (relop -> LESS_OR_EQUAL .)


state 67

    (69) relop -> GREATER_THAN .

    LPAREN          reduce using rule 69 (relop -> GREATER_THAN .)
    NUMBER          reduce using rule 69 (relop -> GREATER_THAN .)
    ID              reduce using rule 69 (relop -> GREATER_THAN .)


state 68

    (70) relop -> GREATEREQUAL .

    LPAREN          reduce using rule 70 (relop -> GREATEREQUAL .)
    NUMBER          reduce using rule 70 (relop -> GREATEREQUAL .)
    ID              reduce using rule 70 (relop -> GREATEREQUAL .)


state 69

    (71) relop -> DEQUAL .

    LPAREN          reduce using rule 71 (relop -> DEQUAL .)
    NUMBER          reduce using rule 71 (relop -> DEQUAL .)
    ID              reduce using rule 71 (relop -> DEQUAL .)


state 70

    (72) relop -> DISTINT .

    LPAREN          reduce using rule 72 (relop -> DISTINT .)
    NUMBER          reduce using rule 72 (relop -> DISTINT .)
    ID              reduce using rule 72 (relop -> DISTINT .)


state 71

    (73) relop -> QUOTES .

    LPAREN          reduce using rule 73 (relop -> QUOTES .)
    NUMBER          reduce using rule 73 (relop -> QUOTES .)
    ID              reduce using rule 73 (relop -> QUOTES .)


state 72

    (76) addop -> PLUS .

    LPAREN          reduce using rule 76 (addop -> PLUS .)
    NUMBER          reduce using rule 76 (addop -> PLUS .)
    ID              reduce using rule 76 (addop -> PLUS .)


state 73

    (77) addop -> MINUS .

    LPAREN          reduce using rule 77 (addop -> MINUS .)
    NUMBER          reduce using rule 77 (addop -> MINUS .)
    ID              reduce using rule 77 (addop -> MINUS .)


state 74

    (78) term -> term mulop . factor
    (82) factor -> . LPAREN expression RPAREN
    (83) factor -> . var
    (84) factor -> . call
    (85) factor -> . NUMBER
    (63) var -> . ID
    (64) var -> . ID LBRACKET expression RBRACKET
    (86) call -> . ID LPAREN args RPAREN

    LPAREN          shift and go to state 52
    NUMBER          shift and go to state 54
    ID              shift and go to state 45

    factor                         shift and go to state 89
    var                            shift and go to state 87
    call                           shift and go to state 53

state 75

    (80) mulop -> TIMES .

    LPAREN          reduce using rule 80 (mulop -> TIMES .)
    NUMBER          reduce using rule 80 (mulop -> TIMES .)
    ID              reduce using rule 80 (mulop -> TIMES .)


state 76

    (81) mulop -> DIVIDE .

    LPAREN          reduce using rule 81 (mulop -> DIVIDE .)
    NUMBER          reduce using rule 81 (mulop -> DIVIDE .)
    ID              reduce using rule 81 (mulop -> DIVIDE .)


state 77

    (82) factor -> LPAREN expression . RPAREN

    RPAREN          shift and go to state 90


state 78

    (17) param -> type_specifier ID LBRACKET RBRACKET .

    COMMA           reduce using rule 17 (param -> type_specifier ID LBRACKET RBRACKET .)
    RPAREN          reduce using rule 17 (param -> type_specifier ID LBRACKET RBRACKET .)


state 79

    (18) compount_stmt -> LBLOCK local_declarations . statement_list RBLOCK
    (19) local_declarations -> local_declarations . var_declaration
    (21) statement_list -> . statement_list statement
    (22) statement_list -> . empty
    (2) var_declaration -> . type_specifier ID SEMICOLON
    (3) var_declaration -> . type_specifier ID EQUAL NUMBER SEMICOLON
    (4) var_declaration -> . type_specifier ID EQUAL var SEMICOLON
    (5) var_declaration -> . type_specifier ID COMMA ID SEMICOLON
    (6) var_declaration -> . type_specifier ID LBRACKET NUMBER RBRACKET SEMICOLON
    (91) empty -> .
    (13) type_specifier -> . INT
    (14) type_specifier -> . VOID
    (15) type_specifier -> . STRING

    RBLOCK          reduce using rule 91 (empty -> .)
    SEMICOLON       reduce using rule 91 (empty -> .)
    COUT            reduce using rule 91 (empty -> .)
    CIN             reduce using rule 91 (empty -> .)
    ID              reduce using rule 91 (empty -> .)
    PLUSPLUS        reduce using rule 91 (empty -> .)
    MINUSMINUS      reduce using rule 91 (empty -> .)
    LBLOCK          reduce using rule 91 (empty -> .)
    IF              reduce using rule 91 (empty -> .)
    WHILE           reduce using rule 91 (empty -> .)
    FOR             reduce using rule 91 (empty -> .)
    RETURN          reduce using rule 91 (empty -> .)
    LPAREN          reduce using rule 91 (empty -> .)
    NUMBER          reduce using rule 91 (empty -> .)
    INT             shift and go to state 9
    VOID            shift and go to state 10
    STRING          shift and go to state 11

    statement_list                 shift and go to state 91
    var_declaration                shift and go to state 92
    empty                          shift and go to state 93
    type_specifier                 shift and go to state 94

state 80

    (20) local_declarations -> empty .

    INT             reduce using rule 20 (local_declarations -> empty .)
    VOID            reduce using rule 20 (local_declarations -> empty .)
    STRING          reduce using rule 20 (local_declarations -> empty .)
    RBLOCK          reduce using rule 20 (local_declarations -> empty .)
    SEMICOLON       reduce using rule 20 (local_declarations -> empty .)
    COUT            reduce using rule 20 (local_declarations -> empty .)
    CIN             reduce using rule 20 (local_declarations -> empty .)
    ID              reduce using rule 20 (local_declarations -> empty .)
    PLUSPLUS        reduce using rule 20 (local_declarations -> empty .)
    MINUSMINUS      reduce using rule 20 (local_declarations -> empty .)
    LBLOCK          reduce using rule 20 (local_declarations -> empty .)
    IF              reduce using rule 20 (local_declarations -> empty .)
    WHILE           reduce using rule 20 (local_declarations -> empty .)
    FOR             reduce using rule 20 (local_declarations -> empty .)
    RETURN          reduce using rule 20 (local_declarations -> empty .)
    LPAREN          reduce using rule 20 (local_declarations -> empty .)
    NUMBER          reduce using rule 20 (local_declarations -> empty .)


state 81

    (86) call -> ID LPAREN args . RPAREN

    RPAREN          shift and go to state 95


state 82

    (87) args -> args_list .
    (89) args_list -> args_list . COMMA expression

    RPAREN          reduce using rule 87 (args -> args_list .)
    COMMA           shift and go to state 96


state 83

    (88) args -> empty .

    RPAREN          reduce using rule 88 (args -> empty .)


state 84

    (90) args_list -> expression .

    COMMA           reduce using rule 90 (args_list -> expression .)
    RPAREN          reduce using rule 90 (args_list -> expression .)


state 85

    (55) expression -> var EQUAL expression .

    RBRACKET        reduce using rule 55 (expression -> var EQUAL expression .)
    RPAREN          reduce using rule 55 (expression -> var EQUAL expression .)
    COMMA           reduce using rule 55 (expression -> var EQUAL expression .)
    SEMICOLON       reduce using rule 55 (expression -> var EQUAL expression .)


state 86

    (65) simple_expression -> additive_expression relop additive_expression .
    (74) additive_expression -> additive_expression . addop term
    (76) addop -> . PLUS
    (77) addop -> . MINUS

    RBRACKET        reduce using rule 65 (simple_expression -> additive_expression relop additive_expression .)
    RPAREN          reduce using rule 65 (simple_expression -> additive_expression relop additive_expression .)
    COMMA           reduce using rule 65 (simple_expression -> additive_expression relop additive_expression .)
    SEMICOLON       reduce using rule 65 (simple_expression -> additive_expression relop additive_expression .)
    PLUS            shift and go to state 72
    MINUS           shift and go to state 73

    addop                          shift and go to state 64

state 87

    (83) factor -> var .

    TIMES           reduce using rule 83 (factor -> var .)
    DIVIDE          reduce using rule 83 (factor -> var .)
    PLUS            reduce using rule 83 (factor -> var .)
    MINUS           reduce using rule 83 (factor -> var .)
    RBRACKET        reduce using rule 83 (factor -> var .)
    RPAREN          reduce using rule 83 (factor -> var .)
    COMMA           reduce using rule 83 (factor -> var .)
    SEMICOLON       reduce using rule 83 (factor -> var .)
    LESS_THAN       reduce using rule 83 (factor -> var .)
    LESS_OR_EQUAL   reduce using rule 83 (factor -> var .)
    GREATER_THAN    reduce using rule 83 (factor -> var .)
    GREATEREQUAL    reduce using rule 83 (factor -> var .)
    DEQUAL          reduce using rule 83 (factor -> var .)
    DISTINT         reduce using rule 83 (factor -> var .)
    QUOTES          reduce using rule 83 (factor -> var .)


state 88

    (74) additive_expression -> additive_expression addop term .
    (78) term -> term . mulop factor
    (80) mulop -> . TIMES
    (81) mulop -> . DIVIDE

    LESS_THAN       reduce using rule 74 (additive_expression -> additive_expression addop term .)
    LESS_OR_EQUAL   reduce using rule 74 (additive_expression -> additive_expression addop term .)
    GREATER_THAN    reduce using rule 74 (additive_expression -> additive_expression addop term .)
    GREATEREQUAL    reduce using rule 74 (additive_expression -> additive_expression addop term .)
    DEQUAL          reduce using rule 74 (additive_expression -> additive_expression addop term .)
    DISTINT         reduce using rule 74 (additive_expression -> additive_expression addop term .)
    QUOTES          reduce using rule 74 (additive_expression -> additive_expression addop term .)
    PLUS            reduce using rule 74 (additive_expression -> additive_expression addop term .)
    MINUS           reduce using rule 74 (additive_expression -> additive_expression addop term .)
    RBRACKET        reduce using rule 74 (additive_expression -> additive_expression addop term .)
    RPAREN          reduce using rule 74 (additive_expression -> additive_expression addop term .)
    COMMA           reduce using rule 74 (additive_expression -> additive_expression addop term .)
    SEMICOLON       reduce using rule 74 (additive_expression -> additive_expression addop term .)
    TIMES           shift and go to state 75
    DIVIDE          shift and go to state 76

    mulop                          shift and go to state 74

state 89

    (78) term -> term mulop factor .

    TIMES           reduce using rule 78 (term -> term mulop factor .)
    DIVIDE          reduce using rule 78 (term -> term mulop factor .)
    LESS_THAN       reduce using rule 78 (term -> term mulop factor .)
    LESS_OR_EQUAL   reduce using rule 78 (term -> term mulop factor .)
    GREATER_THAN    reduce using rule 78 (term -> term mulop factor .)
    GREATEREQUAL    reduce using rule 78 (term -> term mulop factor .)
    DEQUAL          reduce using rule 78 (term -> term mulop factor .)
    DISTINT         reduce using rule 78 (term -> term mulop factor .)
    QUOTES          reduce using rule 78 (term -> term mulop factor .)
    PLUS            reduce using rule 78 (term -> term mulop factor .)
    MINUS           reduce using rule 78 (term -> term mulop factor .)
    RBRACKET        reduce using rule 78 (term -> term mulop factor .)
    RPAREN          reduce using rule 78 (term -> term mulop factor .)
    COMMA           reduce using rule 78 (term -> term mulop factor .)
    SEMICOLON       reduce using rule 78 (term -> term mulop factor .)


state 90

    (82) factor -> LPAREN expression RPAREN .

    TIMES           reduce using rule 82 (factor -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 82 (factor -> LPAREN expression RPAREN .)
    LESS_THAN       reduce using rule 82 (factor -> LPAREN expression RPAREN .)
    LESS_OR_EQUAL   reduce using rule 82 (factor -> LPAREN expression RPAREN .)
    GREATER_THAN    reduce using rule 82 (factor -> LPAREN expression RPAREN .)
    GREATEREQUAL    reduce using rule 82 (factor -> LPAREN expression RPAREN .)
    DEQUAL          reduce using rule 82 (factor -> LPAREN expression RPAREN .)
    DISTINT         reduce using rule 82 (factor -> LPAREN expression RPAREN .)
    QUOTES          reduce using rule 82 (factor -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 82 (factor -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 82 (factor -> LPAREN expression RPAREN .)
    RBRACKET        reduce using rule 82 (factor -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 82 (factor -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 82 (factor -> LPAREN expression RPAREN .)
    SEMICOLON       reduce using rule 82 (factor -> LPAREN expression RPAREN .)


state 91

    (18) compount_stmt -> LBLOCK local_declarations statement_list . RBLOCK
    (21) statement_list -> statement_list . statement
    (23) statement -> . expression_stmt
    (24) statement -> . compount_stmt
    (25) statement -> . selection_stmt
    (26) statement -> . iteration_stmt
    (27) statement -> . return_stmt
    (28) expression_stmt -> . expression SEMICOLON
    (29) expression_stmt -> . SEMICOLON
    (30) expression_stmt -> . COUT L_SHIFT QUOTES ID QUOTES SEMICOLON
    (31) expression_stmt -> . COUT L_SHIFT QUOTES ID QUOTES L_SHIFT ENDL SEMICOLON
    (32) expression_stmt -> . COUT L_SHIFT STRING SEMICOLON
    (33) expression_stmt -> . COUT L_SHIFT STRING L_SHIFT ENDL SEMICOLON
    (34) expression_stmt -> . COUT L_SHIFT var SEMICOLON
    (35) expression_stmt -> . COUT L_SHIFT var L_SHIFT ENDL SEMICOLON
    (36) expression_stmt -> . COUT L_SHIFT var L_SHIFT var SEMICOLON
    (37) expression_stmt -> . COUT L_SHIFT var L_SHIFT var L_SHIFT ENDL SEMICOLON
    (38) expression_stmt -> . CIN R_SHIFT var SEMICOLON
    (39) expression_stmt -> . CIN R_SHIFT var R_SHIFT var SEMICOLON
    (40) expression_stmt -> . ID PLUSPLUS
    (41) expression_stmt -> . PLUSPLUS ID
    (42) expression_stmt -> . ID MINUSMINUS
    (43) expression_stmt -> . MINUSMINUS ID
    (18) compount_stmt -> . LBLOCK local_declarations statement_list RBLOCK
    (44) selection_stmt -> . IF LPAREN expression RPAREN statement
    (45) selection_stmt -> . IF LPAREN expression RPAREN statement ELSE statement
    (46) iteration_stmt -> . WHILE LPAREN expression RPAREN statement
    (47) iteration_stmt -> .
    (48) iteration_stmt -> . FOR LPAREN var SEMICOLON expression SEMICOLON var MINUSMINUS RPAREN statement
    (49) iteration_stmt -> . FOR LPAREN var SEMICOLON expression SEMICOLON expression RPAREN statement
    (50) iteration_stmt -> . FOR LPAREN var SEMICOLON expression SEMICOLON var PLUSPLUS RPAREN statement
    (51) iteration_stmt -> . FOR LPAREN var SEMICOLON expression SEMICOLON PLUSPLUS var RPAREN statement
    (52) iteration_stmt -> . FOR LPAREN var SEMICOLON expression SEMICOLON MINUSMINUS var RPAREN statement
    (53) return_stmt -> . RETURN SEMICOLON
    (54) return_stmt -> . RETURN expression SEMICOLON
    (55) expression -> . var EQUAL expression
    (56) expression -> . simple_expression
    (63) var -> . ID
    (64) var -> . ID LBRACKET expression RBRACKET
    (65) simple_expression -> . additive_expression relop additive_expression
    (66) simple_expression -> . additive_expression
    (74) additive_expression -> . additive_expression addop term
    (75) additive_expression -> . term
    (78) term -> . term mulop factor
    (79) term -> . factor
    (82) factor -> . LPAREN expression RPAREN
    (83) factor -> . var
    (84) factor -> . call
    (85) factor -> . NUMBER
    (86) call -> . ID LPAREN args RPAREN

  ! shift/reduce conflict for RBLOCK resolved as shift
  ! shift/reduce conflict for SEMICOLON resolved as shift
  ! shift/reduce conflict for COUT resolved as shift
  ! shift/reduce conflict for CIN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for PLUSPLUS resolved as shift
  ! shift/reduce conflict for MINUSMINUS resolved as shift
  ! shift/reduce conflict for LBLOCK resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
    RBLOCK          shift and go to state 97
    SEMICOLON       shift and go to state 105
    COUT            shift and go to state 106
    CIN             shift and go to state 108
    ID              shift and go to state 107
    PLUSPLUS        shift and go to state 109
    MINUSMINUS      shift and go to state 110
    LBLOCK          shift and go to state 58
    IF              shift and go to state 111
    WHILE           shift and go to state 112
    FOR             shift and go to state 113
    RETURN          shift and go to state 114
    LPAREN          shift and go to state 52
    NUMBER          shift and go to state 54

  ! RBLOCK          [ reduce using rule 47 (iteration_stmt -> .) ]
  ! SEMICOLON       [ reduce using rule 47 (iteration_stmt -> .) ]
  ! COUT            [ reduce using rule 47 (iteration_stmt -> .) ]
  ! CIN             [ reduce using rule 47 (iteration_stmt -> .) ]
  ! ID              [ reduce using rule 47 (iteration_stmt -> .) ]
  ! PLUSPLUS        [ reduce using rule 47 (iteration_stmt -> .) ]
  ! MINUSMINUS      [ reduce using rule 47 (iteration_stmt -> .) ]
  ! LBLOCK          [ reduce using rule 47 (iteration_stmt -> .) ]
  ! IF              [ reduce using rule 47 (iteration_stmt -> .) ]
  ! WHILE           [ reduce using rule 47 (iteration_stmt -> .) ]
  ! FOR             [ reduce using rule 47 (iteration_stmt -> .) ]
  ! RETURN          [ reduce using rule 47 (iteration_stmt -> .) ]
  ! LPAREN          [ reduce using rule 47 (iteration_stmt -> .) ]
  ! NUMBER          [ reduce using rule 47 (iteration_stmt -> .) ]

    statement                      shift and go to state 98
    expression_stmt                shift and go to state 99
    compount_stmt                  shift and go to state 100
    selection_stmt                 shift and go to state 101
    iteration_stmt                 shift and go to state 102
    return_stmt                    shift and go to state 103
    expression                     shift and go to state 104
    var                            shift and go to state 47
    simple_expression              shift and go to state 48
    additive_expression            shift and go to state 49
    term                           shift and go to state 50
    factor                         shift and go to state 51
    call                           shift and go to state 53

state 92

    (19) local_declarations -> local_declarations var_declaration .

    INT             reduce using rule 19 (local_declarations -> local_declarations var_declaration .)
    VOID            reduce using rule 19 (local_declarations -> local_declarations var_declaration .)
    STRING          reduce using rule 19 (local_declarations -> local_declarations var_declaration .)
    RBLOCK          reduce using rule 19 (local_declarations -> local_declarations var_declaration .)
    SEMICOLON       reduce using rule 19 (local_declarations -> local_declarations var_declaration .)
    COUT            reduce using rule 19 (local_declarations -> local_declarations var_declaration .)
    CIN             reduce using rule 19 (local_declarations -> local_declarations var_declaration .)
    ID              reduce using rule 19 (local_declarations -> local_declarations var_declaration .)
    PLUSPLUS        reduce using rule 19 (local_declarations -> local_declarations var_declaration .)
    MINUSMINUS      reduce using rule 19 (local_declarations -> local_declarations var_declaration .)
    LBLOCK          reduce using rule 19 (local_declarations -> local_declarations var_declaration .)
    IF              reduce using rule 19 (local_declarations -> local_declarations var_declaration .)
    WHILE           reduce using rule 19 (local_declarations -> local_declarations var_declaration .)
    FOR             reduce using rule 19 (local_declarations -> local_declarations var_declaration .)
    RETURN          reduce using rule 19 (local_declarations -> local_declarations var_declaration .)
    LPAREN          reduce using rule 19 (local_declarations -> local_declarations var_declaration .)
    NUMBER          reduce using rule 19 (local_declarations -> local_declarations var_declaration .)


state 93

    (22) statement_list -> empty .

    RBLOCK          reduce using rule 22 (statement_list -> empty .)
    SEMICOLON       reduce using rule 22 (statement_list -> empty .)
    COUT            reduce using rule 22 (statement_list -> empty .)
    CIN             reduce using rule 22 (statement_list -> empty .)
    ID              reduce using rule 22 (statement_list -> empty .)
    PLUSPLUS        reduce using rule 22 (statement_list -> empty .)
    MINUSMINUS      reduce using rule 22 (statement_list -> empty .)
    LBLOCK          reduce using rule 22 (statement_list -> empty .)
    IF              reduce using rule 22 (statement_list -> empty .)
    WHILE           reduce using rule 22 (statement_list -> empty .)
    FOR             reduce using rule 22 (statement_list -> empty .)
    RETURN          reduce using rule 22 (statement_list -> empty .)
    LPAREN          reduce using rule 22 (statement_list -> empty .)
    NUMBER          reduce using rule 22 (statement_list -> empty .)


state 94

    (2) var_declaration -> type_specifier . ID SEMICOLON
    (3) var_declaration -> type_specifier . ID EQUAL NUMBER SEMICOLON
    (4) var_declaration -> type_specifier . ID EQUAL var SEMICOLON
    (5) var_declaration -> type_specifier . ID COMMA ID SEMICOLON
    (6) var_declaration -> type_specifier . ID LBRACKET NUMBER RBRACKET SEMICOLON

    ID              shift and go to state 115


state 95

    (86) call -> ID LPAREN args RPAREN .

    TIMES           reduce using rule 86 (call -> ID LPAREN args RPAREN .)
    DIVIDE          reduce using rule 86 (call -> ID LPAREN args RPAREN .)
    LESS_THAN       reduce using rule 86 (call -> ID LPAREN args RPAREN .)
    LESS_OR_EQUAL   reduce using rule 86 (call -> ID LPAREN args RPAREN .)
    GREATER_THAN    reduce using rule 86 (call -> ID LPAREN args RPAREN .)
    GREATEREQUAL    reduce using rule 86 (call -> ID LPAREN args RPAREN .)
    DEQUAL          reduce using rule 86 (call -> ID LPAREN args RPAREN .)
    DISTINT         reduce using rule 86 (call -> ID LPAREN args RPAREN .)
    QUOTES          reduce using rule 86 (call -> ID LPAREN args RPAREN .)
    PLUS            reduce using rule 86 (call -> ID LPAREN args RPAREN .)
    MINUS           reduce using rule 86 (call -> ID LPAREN args RPAREN .)
    RBRACKET        reduce using rule 86 (call -> ID LPAREN args RPAREN .)
    RPAREN          reduce using rule 86 (call -> ID LPAREN args RPAREN .)
    COMMA           reduce using rule 86 (call -> ID LPAREN args RPAREN .)
    SEMICOLON       reduce using rule 86 (call -> ID LPAREN args RPAREN .)


state 96

    (89) args_list -> args_list COMMA . expression
    (55) expression -> . var EQUAL expression
    (56) expression -> . simple_expression
    (63) var -> . ID
    (64) var -> . ID LBRACKET expression RBRACKET
    (65) simple_expression -> . additive_expression relop additive_expression
    (66) simple_expression -> . additive_expression
    (74) additive_expression -> . additive_expression addop term
    (75) additive_expression -> . term
    (78) term -> . term mulop factor
    (79) term -> . factor
    (82) factor -> . LPAREN expression RPAREN
    (83) factor -> . var
    (84) factor -> . call
    (85) factor -> . NUMBER
    (86) call -> . ID LPAREN args RPAREN

    ID              shift and go to state 45
    LPAREN          shift and go to state 52
    NUMBER          shift and go to state 54

    expression                     shift and go to state 116
    var                            shift and go to state 47
    simple_expression              shift and go to state 48
    additive_expression            shift and go to state 49
    term                           shift and go to state 50
    factor                         shift and go to state 51
    call                           shift and go to state 53

state 97

    (18) compount_stmt -> LBLOCK local_declarations statement_list RBLOCK .

    HASH            reduce using rule 18 (compount_stmt -> LBLOCK local_declarations statement_list RBLOCK .)
    USING           reduce using rule 18 (compount_stmt -> LBLOCK local_declarations statement_list RBLOCK .)
    INT             reduce using rule 18 (compount_stmt -> LBLOCK local_declarations statement_list RBLOCK .)
    VOID            reduce using rule 18 (compount_stmt -> LBLOCK local_declarations statement_list RBLOCK .)
    STRING          reduce using rule 18 (compount_stmt -> LBLOCK local_declarations statement_list RBLOCK .)
    $end            reduce using rule 18 (compount_stmt -> LBLOCK local_declarations statement_list RBLOCK .)
    RBLOCK          reduce using rule 18 (compount_stmt -> LBLOCK local_declarations statement_list RBLOCK .)
    SEMICOLON       reduce using rule 18 (compount_stmt -> LBLOCK local_declarations statement_list RBLOCK .)
    COUT            reduce using rule 18 (compount_stmt -> LBLOCK local_declarations statement_list RBLOCK .)
    CIN             reduce using rule 18 (compount_stmt -> LBLOCK local_declarations statement_list RBLOCK .)
    ID              reduce using rule 18 (compount_stmt -> LBLOCK local_declarations statement_list RBLOCK .)
    PLUSPLUS        reduce using rule 18 (compount_stmt -> LBLOCK local_declarations statement_list RBLOCK .)
    MINUSMINUS      reduce using rule 18 (compount_stmt -> LBLOCK local_declarations statement_list RBLOCK .)
    LBLOCK          reduce using rule 18 (compount_stmt -> LBLOCK local_declarations statement_list RBLOCK .)
    IF              reduce using rule 18 (compount_stmt -> LBLOCK local_declarations statement_list RBLOCK .)
    WHILE           reduce using rule 18 (compount_stmt -> LBLOCK local_declarations statement_list RBLOCK .)
    FOR             reduce using rule 18 (compount_stmt -> LBLOCK local_declarations statement_list RBLOCK .)
    RETURN          reduce using rule 18 (compount_stmt -> LBLOCK local_declarations statement_list RBLOCK .)
    LPAREN          reduce using rule 18 (compount_stmt -> LBLOCK local_declarations statement_list RBLOCK .)
    NUMBER          reduce using rule 18 (compount_stmt -> LBLOCK local_declarations statement_list RBLOCK .)
    ELSE            reduce using rule 18 (compount_stmt -> LBLOCK local_declarations statement_list RBLOCK .)


state 98

    (21) statement_list -> statement_list statement .

    RBLOCK          reduce using rule 21 (statement_list -> statement_list statement .)
    SEMICOLON       reduce using rule 21 (statement_list -> statement_list statement .)
    COUT            reduce using rule 21 (statement_list -> statement_list statement .)
    CIN             reduce using rule 21 (statement_list -> statement_list statement .)
    ID              reduce using rule 21 (statement_list -> statement_list statement .)
    PLUSPLUS        reduce using rule 21 (statement_list -> statement_list statement .)
    MINUSMINUS      reduce using rule 21 (statement_list -> statement_list statement .)
    LBLOCK          reduce using rule 21 (statement_list -> statement_list statement .)
    IF              reduce using rule 21 (statement_list -> statement_list statement .)
    WHILE           reduce using rule 21 (statement_list -> statement_list statement .)
    FOR             reduce using rule 21 (statement_list -> statement_list statement .)
    RETURN          reduce using rule 21 (statement_list -> statement_list statement .)
    LPAREN          reduce using rule 21 (statement_list -> statement_list statement .)
    NUMBER          reduce using rule 21 (statement_list -> statement_list statement .)


state 99

    (23) statement -> expression_stmt .

    RBLOCK          reduce using rule 23 (statement -> expression_stmt .)
    SEMICOLON       reduce using rule 23 (statement -> expression_stmt .)
    COUT            reduce using rule 23 (statement -> expression_stmt .)
    CIN             reduce using rule 23 (statement -> expression_stmt .)
    ID              reduce using rule 23 (statement -> expression_stmt .)
    PLUSPLUS        reduce using rule 23 (statement -> expression_stmt .)
    MINUSMINUS      reduce using rule 23 (statement -> expression_stmt .)
    LBLOCK          reduce using rule 23 (statement -> expression_stmt .)
    IF              reduce using rule 23 (statement -> expression_stmt .)
    WHILE           reduce using rule 23 (statement -> expression_stmt .)
    FOR             reduce using rule 23 (statement -> expression_stmt .)
    RETURN          reduce using rule 23 (statement -> expression_stmt .)
    LPAREN          reduce using rule 23 (statement -> expression_stmt .)
    NUMBER          reduce using rule 23 (statement -> expression_stmt .)
    ELSE            reduce using rule 23 (statement -> expression_stmt .)


state 100

    (24) statement -> compount_stmt .

    RBLOCK          reduce using rule 24 (statement -> compount_stmt .)
    SEMICOLON       reduce using rule 24 (statement -> compount_stmt .)
    COUT            reduce using rule 24 (statement -> compount_stmt .)
    CIN             reduce using rule 24 (statement -> compount_stmt .)
    ID              reduce using rule 24 (statement -> compount_stmt .)
    PLUSPLUS        reduce using rule 24 (statement -> compount_stmt .)
    MINUSMINUS      reduce using rule 24 (statement -> compount_stmt .)
    LBLOCK          reduce using rule 24 (statement -> compount_stmt .)
    IF              reduce using rule 24 (statement -> compount_stmt .)
    WHILE           reduce using rule 24 (statement -> compount_stmt .)
    FOR             reduce using rule 24 (statement -> compount_stmt .)
    RETURN          reduce using rule 24 (statement -> compount_stmt .)
    LPAREN          reduce using rule 24 (statement -> compount_stmt .)
    NUMBER          reduce using rule 24 (statement -> compount_stmt .)
    ELSE            reduce using rule 24 (statement -> compount_stmt .)


state 101

    (25) statement -> selection_stmt .

    RBLOCK          reduce using rule 25 (statement -> selection_stmt .)
    SEMICOLON       reduce using rule 25 (statement -> selection_stmt .)
    COUT            reduce using rule 25 (statement -> selection_stmt .)
    CIN             reduce using rule 25 (statement -> selection_stmt .)
    ID              reduce using rule 25 (statement -> selection_stmt .)
    PLUSPLUS        reduce using rule 25 (statement -> selection_stmt .)
    MINUSMINUS      reduce using rule 25 (statement -> selection_stmt .)
    LBLOCK          reduce using rule 25 (statement -> selection_stmt .)
    IF              reduce using rule 25 (statement -> selection_stmt .)
    WHILE           reduce using rule 25 (statement -> selection_stmt .)
    FOR             reduce using rule 25 (statement -> selection_stmt .)
    RETURN          reduce using rule 25 (statement -> selection_stmt .)
    LPAREN          reduce using rule 25 (statement -> selection_stmt .)
    NUMBER          reduce using rule 25 (statement -> selection_stmt .)
    ELSE            reduce using rule 25 (statement -> selection_stmt .)


state 102

    (26) statement -> iteration_stmt .

    RBLOCK          reduce using rule 26 (statement -> iteration_stmt .)
    SEMICOLON       reduce using rule 26 (statement -> iteration_stmt .)
    COUT            reduce using rule 26 (statement -> iteration_stmt .)
    CIN             reduce using rule 26 (statement -> iteration_stmt .)
    ID              reduce using rule 26 (statement -> iteration_stmt .)
    PLUSPLUS        reduce using rule 26 (statement -> iteration_stmt .)
    MINUSMINUS      reduce using rule 26 (statement -> iteration_stmt .)
    LBLOCK          reduce using rule 26 (statement -> iteration_stmt .)
    IF              reduce using rule 26 (statement -> iteration_stmt .)
    WHILE           reduce using rule 26 (statement -> iteration_stmt .)
    FOR             reduce using rule 26 (statement -> iteration_stmt .)
    RETURN          reduce using rule 26 (statement -> iteration_stmt .)
    LPAREN          reduce using rule 26 (statement -> iteration_stmt .)
    NUMBER          reduce using rule 26 (statement -> iteration_stmt .)
    ELSE            reduce using rule 26 (statement -> iteration_stmt .)


state 103

    (27) statement -> return_stmt .

    RBLOCK          reduce using rule 27 (statement -> return_stmt .)
    SEMICOLON       reduce using rule 27 (statement -> return_stmt .)
    COUT            reduce using rule 27 (statement -> return_stmt .)
    CIN             reduce using rule 27 (statement -> return_stmt .)
    ID              reduce using rule 27 (statement -> return_stmt .)
    PLUSPLUS        reduce using rule 27 (statement -> return_stmt .)
    MINUSMINUS      reduce using rule 27 (statement -> return_stmt .)
    LBLOCK          reduce using rule 27 (statement -> return_stmt .)
    IF              reduce using rule 27 (statement -> return_stmt .)
    WHILE           reduce using rule 27 (statement -> return_stmt .)
    FOR             reduce using rule 27 (statement -> return_stmt .)
    RETURN          reduce using rule 27 (statement -> return_stmt .)
    LPAREN          reduce using rule 27 (statement -> return_stmt .)
    NUMBER          reduce using rule 27 (statement -> return_stmt .)
    ELSE            reduce using rule 27 (statement -> return_stmt .)


state 104

    (28) expression_stmt -> expression . SEMICOLON

    SEMICOLON       shift and go to state 117


state 105

    (29) expression_stmt -> SEMICOLON .

    RBLOCK          reduce using rule 29 (expression_stmt -> SEMICOLON .)
    SEMICOLON       reduce using rule 29 (expression_stmt -> SEMICOLON .)
    COUT            reduce using rule 29 (expression_stmt -> SEMICOLON .)
    CIN             reduce using rule 29 (expression_stmt -> SEMICOLON .)
    ID              reduce using rule 29 (expression_stmt -> SEMICOLON .)
    PLUSPLUS        reduce using rule 29 (expression_stmt -> SEMICOLON .)
    MINUSMINUS      reduce using rule 29 (expression_stmt -> SEMICOLON .)
    LBLOCK          reduce using rule 29 (expression_stmt -> SEMICOLON .)
    IF              reduce using rule 29 (expression_stmt -> SEMICOLON .)
    WHILE           reduce using rule 29 (expression_stmt -> SEMICOLON .)
    FOR             reduce using rule 29 (expression_stmt -> SEMICOLON .)
    RETURN          reduce using rule 29 (expression_stmt -> SEMICOLON .)
    LPAREN          reduce using rule 29 (expression_stmt -> SEMICOLON .)
    NUMBER          reduce using rule 29 (expression_stmt -> SEMICOLON .)
    ELSE            reduce using rule 29 (expression_stmt -> SEMICOLON .)


state 106

    (30) expression_stmt -> COUT . L_SHIFT QUOTES ID QUOTES SEMICOLON
    (31) expression_stmt -> COUT . L_SHIFT QUOTES ID QUOTES L_SHIFT ENDL SEMICOLON
    (32) expression_stmt -> COUT . L_SHIFT STRING SEMICOLON
    (33) expression_stmt -> COUT . L_SHIFT STRING L_SHIFT ENDL SEMICOLON
    (34) expression_stmt -> COUT . L_SHIFT var SEMICOLON
    (35) expression_stmt -> COUT . L_SHIFT var L_SHIFT ENDL SEMICOLON
    (36) expression_stmt -> COUT . L_SHIFT var L_SHIFT var SEMICOLON
    (37) expression_stmt -> COUT . L_SHIFT var L_SHIFT var L_SHIFT ENDL SEMICOLON

    L_SHIFT         shift and go to state 118


state 107

    (40) expression_stmt -> ID . PLUSPLUS
    (42) expression_stmt -> ID . MINUSMINUS
    (63) var -> ID .
    (64) var -> ID . LBRACKET expression RBRACKET
    (86) call -> ID . LPAREN args RPAREN

    PLUSPLUS        shift and go to state 119
    MINUSMINUS      shift and go to state 120
    EQUAL           reduce using rule 63 (var -> ID .)
    TIMES           reduce using rule 63 (var -> ID .)
    DIVIDE          reduce using rule 63 (var -> ID .)
    LESS_THAN       reduce using rule 63 (var -> ID .)
    LESS_OR_EQUAL   reduce using rule 63 (var -> ID .)
    GREATER_THAN    reduce using rule 63 (var -> ID .)
    GREATEREQUAL    reduce using rule 63 (var -> ID .)
    DEQUAL          reduce using rule 63 (var -> ID .)
    DISTINT         reduce using rule 63 (var -> ID .)
    QUOTES          reduce using rule 63 (var -> ID .)
    PLUS            reduce using rule 63 (var -> ID .)
    MINUS           reduce using rule 63 (var -> ID .)
    SEMICOLON       reduce using rule 63 (var -> ID .)
    LBRACKET        shift and go to state 37
    LPAREN          shift and go to state 60


state 108

    (38) expression_stmt -> CIN . R_SHIFT var SEMICOLON
    (39) expression_stmt -> CIN . R_SHIFT var R_SHIFT var SEMICOLON

    R_SHIFT         shift and go to state 121


state 109

    (41) expression_stmt -> PLUSPLUS . ID

    ID              shift and go to state 122


state 110

    (43) expression_stmt -> MINUSMINUS . ID

    ID              shift and go to state 123


state 111

    (44) selection_stmt -> IF . LPAREN expression RPAREN statement
    (45) selection_stmt -> IF . LPAREN expression RPAREN statement ELSE statement

    LPAREN          shift and go to state 124


state 112

    (46) iteration_stmt -> WHILE . LPAREN expression RPAREN statement

    LPAREN          shift and go to state 125


state 113

    (48) iteration_stmt -> FOR . LPAREN var SEMICOLON expression SEMICOLON var MINUSMINUS RPAREN statement
    (49) iteration_stmt -> FOR . LPAREN var SEMICOLON expression SEMICOLON expression RPAREN statement
    (50) iteration_stmt -> FOR . LPAREN var SEMICOLON expression SEMICOLON var PLUSPLUS RPAREN statement
    (51) iteration_stmt -> FOR . LPAREN var SEMICOLON expression SEMICOLON PLUSPLUS var RPAREN statement
    (52) iteration_stmt -> FOR . LPAREN var SEMICOLON expression SEMICOLON MINUSMINUS var RPAREN statement

    LPAREN          shift and go to state 126


state 114

    (53) return_stmt -> RETURN . SEMICOLON
    (54) return_stmt -> RETURN . expression SEMICOLON
    (55) expression -> . var EQUAL expression
    (56) expression -> . simple_expression
    (63) var -> . ID
    (64) var -> . ID LBRACKET expression RBRACKET
    (65) simple_expression -> . additive_expression relop additive_expression
    (66) simple_expression -> . additive_expression
    (74) additive_expression -> . additive_expression addop term
    (75) additive_expression -> . term
    (78) term -> . term mulop factor
    (79) term -> . factor
    (82) factor -> . LPAREN expression RPAREN
    (83) factor -> . var
    (84) factor -> . call
    (85) factor -> . NUMBER
    (86) call -> . ID LPAREN args RPAREN

    SEMICOLON       shift and go to state 127
    ID              shift and go to state 45
    LPAREN          shift and go to state 52
    NUMBER          shift and go to state 54

    expression                     shift and go to state 128
    var                            shift and go to state 47
    simple_expression              shift and go to state 48
    additive_expression            shift and go to state 49
    term                           shift and go to state 50
    factor                         shift and go to state 51
    call                           shift and go to state 53

state 115

    (2) var_declaration -> type_specifier ID . SEMICOLON
    (3) var_declaration -> type_specifier ID . EQUAL NUMBER SEMICOLON
    (4) var_declaration -> type_specifier ID . EQUAL var SEMICOLON
    (5) var_declaration -> type_specifier ID . COMMA ID SEMICOLON
    (6) var_declaration -> type_specifier ID . LBRACKET NUMBER RBRACKET SEMICOLON

    SEMICOLON       shift and go to state 18
    EQUAL           shift and go to state 19
    COMMA           shift and go to state 20
    LBRACKET        shift and go to state 21


state 116

    (89) args_list -> args_list COMMA expression .

    COMMA           reduce using rule 89 (args_list -> args_list COMMA expression .)
    RPAREN          reduce using rule 89 (args_list -> args_list COMMA expression .)


state 117

    (28) expression_stmt -> expression SEMICOLON .

    RBLOCK          reduce using rule 28 (expression_stmt -> expression SEMICOLON .)
    SEMICOLON       reduce using rule 28 (expression_stmt -> expression SEMICOLON .)
    COUT            reduce using rule 28 (expression_stmt -> expression SEMICOLON .)
    CIN             reduce using rule 28 (expression_stmt -> expression SEMICOLON .)
    ID              reduce using rule 28 (expression_stmt -> expression SEMICOLON .)
    PLUSPLUS        reduce using rule 28 (expression_stmt -> expression SEMICOLON .)
    MINUSMINUS      reduce using rule 28 (expression_stmt -> expression SEMICOLON .)
    LBLOCK          reduce using rule 28 (expression_stmt -> expression SEMICOLON .)
    IF              reduce using rule 28 (expression_stmt -> expression SEMICOLON .)
    WHILE           reduce using rule 28 (expression_stmt -> expression SEMICOLON .)
    FOR             reduce using rule 28 (expression_stmt -> expression SEMICOLON .)
    RETURN          reduce using rule 28 (expression_stmt -> expression SEMICOLON .)
    LPAREN          reduce using rule 28 (expression_stmt -> expression SEMICOLON .)
    NUMBER          reduce using rule 28 (expression_stmt -> expression SEMICOLON .)
    ELSE            reduce using rule 28 (expression_stmt -> expression SEMICOLON .)


state 118

    (30) expression_stmt -> COUT L_SHIFT . QUOTES ID QUOTES SEMICOLON
    (31) expression_stmt -> COUT L_SHIFT . QUOTES ID QUOTES L_SHIFT ENDL SEMICOLON
    (32) expression_stmt -> COUT L_SHIFT . STRING SEMICOLON
    (33) expression_stmt -> COUT L_SHIFT . STRING L_SHIFT ENDL SEMICOLON
    (34) expression_stmt -> COUT L_SHIFT . var SEMICOLON
    (35) expression_stmt -> COUT L_SHIFT . var L_SHIFT ENDL SEMICOLON
    (36) expression_stmt -> COUT L_SHIFT . var L_SHIFT var SEMICOLON
    (37) expression_stmt -> COUT L_SHIFT . var L_SHIFT var L_SHIFT ENDL SEMICOLON
    (63) var -> . ID
    (64) var -> . ID LBRACKET expression RBRACKET

    QUOTES          shift and go to state 129
    STRING          shift and go to state 130
    ID              shift and go to state 25

    var                            shift and go to state 131

state 119

    (40) expression_stmt -> ID PLUSPLUS .

    RBLOCK          reduce using rule 40 (expression_stmt -> ID PLUSPLUS .)
    SEMICOLON       reduce using rule 40 (expression_stmt -> ID PLUSPLUS .)
    COUT            reduce using rule 40 (expression_stmt -> ID PLUSPLUS .)
    CIN             reduce using rule 40 (expression_stmt -> ID PLUSPLUS .)
    ID              reduce using rule 40 (expression_stmt -> ID PLUSPLUS .)
    PLUSPLUS        reduce using rule 40 (expression_stmt -> ID PLUSPLUS .)
    MINUSMINUS      reduce using rule 40 (expression_stmt -> ID PLUSPLUS .)
    LBLOCK          reduce using rule 40 (expression_stmt -> ID PLUSPLUS .)
    IF              reduce using rule 40 (expression_stmt -> ID PLUSPLUS .)
    WHILE           reduce using rule 40 (expression_stmt -> ID PLUSPLUS .)
    FOR             reduce using rule 40 (expression_stmt -> ID PLUSPLUS .)
    RETURN          reduce using rule 40 (expression_stmt -> ID PLUSPLUS .)
    LPAREN          reduce using rule 40 (expression_stmt -> ID PLUSPLUS .)
    NUMBER          reduce using rule 40 (expression_stmt -> ID PLUSPLUS .)
    ELSE            reduce using rule 40 (expression_stmt -> ID PLUSPLUS .)


state 120

    (42) expression_stmt -> ID MINUSMINUS .

    RBLOCK          reduce using rule 42 (expression_stmt -> ID MINUSMINUS .)
    SEMICOLON       reduce using rule 42 (expression_stmt -> ID MINUSMINUS .)
    COUT            reduce using rule 42 (expression_stmt -> ID MINUSMINUS .)
    CIN             reduce using rule 42 (expression_stmt -> ID MINUSMINUS .)
    ID              reduce using rule 42 (expression_stmt -> ID MINUSMINUS .)
    PLUSPLUS        reduce using rule 42 (expression_stmt -> ID MINUSMINUS .)
    MINUSMINUS      reduce using rule 42 (expression_stmt -> ID MINUSMINUS .)
    LBLOCK          reduce using rule 42 (expression_stmt -> ID MINUSMINUS .)
    IF              reduce using rule 42 (expression_stmt -> ID MINUSMINUS .)
    WHILE           reduce using rule 42 (expression_stmt -> ID MINUSMINUS .)
    FOR             reduce using rule 42 (expression_stmt -> ID MINUSMINUS .)
    RETURN          reduce using rule 42 (expression_stmt -> ID MINUSMINUS .)
    LPAREN          reduce using rule 42 (expression_stmt -> ID MINUSMINUS .)
    NUMBER          reduce using rule 42 (expression_stmt -> ID MINUSMINUS .)
    ELSE            reduce using rule 42 (expression_stmt -> ID MINUSMINUS .)


state 121

    (38) expression_stmt -> CIN R_SHIFT . var SEMICOLON
    (39) expression_stmt -> CIN R_SHIFT . var R_SHIFT var SEMICOLON
    (63) var -> . ID
    (64) var -> . ID LBRACKET expression RBRACKET

    ID              shift and go to state 25

    var                            shift and go to state 132

state 122

    (41) expression_stmt -> PLUSPLUS ID .

    RBLOCK          reduce using rule 41 (expression_stmt -> PLUSPLUS ID .)
    SEMICOLON       reduce using rule 41 (expression_stmt -> PLUSPLUS ID .)
    COUT            reduce using rule 41 (expression_stmt -> PLUSPLUS ID .)
    CIN             reduce using rule 41 (expression_stmt -> PLUSPLUS ID .)
    ID              reduce using rule 41 (expression_stmt -> PLUSPLUS ID .)
    PLUSPLUS        reduce using rule 41 (expression_stmt -> PLUSPLUS ID .)
    MINUSMINUS      reduce using rule 41 (expression_stmt -> PLUSPLUS ID .)
    LBLOCK          reduce using rule 41 (expression_stmt -> PLUSPLUS ID .)
    IF              reduce using rule 41 (expression_stmt -> PLUSPLUS ID .)
    WHILE           reduce using rule 41 (expression_stmt -> PLUSPLUS ID .)
    FOR             reduce using rule 41 (expression_stmt -> PLUSPLUS ID .)
    RETURN          reduce using rule 41 (expression_stmt -> PLUSPLUS ID .)
    LPAREN          reduce using rule 41 (expression_stmt -> PLUSPLUS ID .)
    NUMBER          reduce using rule 41 (expression_stmt -> PLUSPLUS ID .)
    ELSE            reduce using rule 41 (expression_stmt -> PLUSPLUS ID .)


state 123

    (43) expression_stmt -> MINUSMINUS ID .

    RBLOCK          reduce using rule 43 (expression_stmt -> MINUSMINUS ID .)
    SEMICOLON       reduce using rule 43 (expression_stmt -> MINUSMINUS ID .)
    COUT            reduce using rule 43 (expression_stmt -> MINUSMINUS ID .)
    CIN             reduce using rule 43 (expression_stmt -> MINUSMINUS ID .)
    ID              reduce using rule 43 (expression_stmt -> MINUSMINUS ID .)
    PLUSPLUS        reduce using rule 43 (expression_stmt -> MINUSMINUS ID .)
    MINUSMINUS      reduce using rule 43 (expression_stmt -> MINUSMINUS ID .)
    LBLOCK          reduce using rule 43 (expression_stmt -> MINUSMINUS ID .)
    IF              reduce using rule 43 (expression_stmt -> MINUSMINUS ID .)
    WHILE           reduce using rule 43 (expression_stmt -> MINUSMINUS ID .)
    FOR             reduce using rule 43 (expression_stmt -> MINUSMINUS ID .)
    RETURN          reduce using rule 43 (expression_stmt -> MINUSMINUS ID .)
    LPAREN          reduce using rule 43 (expression_stmt -> MINUSMINUS ID .)
    NUMBER          reduce using rule 43 (expression_stmt -> MINUSMINUS ID .)
    ELSE            reduce using rule 43 (expression_stmt -> MINUSMINUS ID .)


state 124

    (44) selection_stmt -> IF LPAREN . expression RPAREN statement
    (45) selection_stmt -> IF LPAREN . expression RPAREN statement ELSE statement
    (55) expression -> . var EQUAL expression
    (56) expression -> . simple_expression
    (63) var -> . ID
    (64) var -> . ID LBRACKET expression RBRACKET
    (65) simple_expression -> . additive_expression relop additive_expression
    (66) simple_expression -> . additive_expression
    (74) additive_expression -> . additive_expression addop term
    (75) additive_expression -> . term
    (78) term -> . term mulop factor
    (79) term -> . factor
    (82) factor -> . LPAREN expression RPAREN
    (83) factor -> . var
    (84) factor -> . call
    (85) factor -> . NUMBER
    (86) call -> . ID LPAREN args RPAREN

    ID              shift and go to state 45
    LPAREN          shift and go to state 52
    NUMBER          shift and go to state 54

    expression                     shift and go to state 133
    var                            shift and go to state 47
    simple_expression              shift and go to state 48
    additive_expression            shift and go to state 49
    term                           shift and go to state 50
    factor                         shift and go to state 51
    call                           shift and go to state 53

state 125

    (46) iteration_stmt -> WHILE LPAREN . expression RPAREN statement
    (55) expression -> . var EQUAL expression
    (56) expression -> . simple_expression
    (63) var -> . ID
    (64) var -> . ID LBRACKET expression RBRACKET
    (65) simple_expression -> . additive_expression relop additive_expression
    (66) simple_expression -> . additive_expression
    (74) additive_expression -> . additive_expression addop term
    (75) additive_expression -> . term
    (78) term -> . term mulop factor
    (79) term -> . factor
    (82) factor -> . LPAREN expression RPAREN
    (83) factor -> . var
    (84) factor -> . call
    (85) factor -> . NUMBER
    (86) call -> . ID LPAREN args RPAREN

    ID              shift and go to state 45
    LPAREN          shift and go to state 52
    NUMBER          shift and go to state 54

    expression                     shift and go to state 134
    var                            shift and go to state 47
    simple_expression              shift and go to state 48
    additive_expression            shift and go to state 49
    term                           shift and go to state 50
    factor                         shift and go to state 51
    call                           shift and go to state 53

state 126

    (48) iteration_stmt -> FOR LPAREN . var SEMICOLON expression SEMICOLON var MINUSMINUS RPAREN statement
    (49) iteration_stmt -> FOR LPAREN . var SEMICOLON expression SEMICOLON expression RPAREN statement
    (50) iteration_stmt -> FOR LPAREN . var SEMICOLON expression SEMICOLON var PLUSPLUS RPAREN statement
    (51) iteration_stmt -> FOR LPAREN . var SEMICOLON expression SEMICOLON PLUSPLUS var RPAREN statement
    (52) iteration_stmt -> FOR LPAREN . var SEMICOLON expression SEMICOLON MINUSMINUS var RPAREN statement
    (63) var -> . ID
    (64) var -> . ID LBRACKET expression RBRACKET

    ID              shift and go to state 25

    var                            shift and go to state 135

state 127

    (53) return_stmt -> RETURN SEMICOLON .

    RBLOCK          reduce using rule 53 (return_stmt -> RETURN SEMICOLON .)
    SEMICOLON       reduce using rule 53 (return_stmt -> RETURN SEMICOLON .)
    COUT            reduce using rule 53 (return_stmt -> RETURN SEMICOLON .)
    CIN             reduce using rule 53 (return_stmt -> RETURN SEMICOLON .)
    ID              reduce using rule 53 (return_stmt -> RETURN SEMICOLON .)
    PLUSPLUS        reduce using rule 53 (return_stmt -> RETURN SEMICOLON .)
    MINUSMINUS      reduce using rule 53 (return_stmt -> RETURN SEMICOLON .)
    LBLOCK          reduce using rule 53 (return_stmt -> RETURN SEMICOLON .)
    IF              reduce using rule 53 (return_stmt -> RETURN SEMICOLON .)
    WHILE           reduce using rule 53 (return_stmt -> RETURN SEMICOLON .)
    FOR             reduce using rule 53 (return_stmt -> RETURN SEMICOLON .)
    RETURN          reduce using rule 53 (return_stmt -> RETURN SEMICOLON .)
    LPAREN          reduce using rule 53 (return_stmt -> RETURN SEMICOLON .)
    NUMBER          reduce using rule 53 (return_stmt -> RETURN SEMICOLON .)
    ELSE            reduce using rule 53 (return_stmt -> RETURN SEMICOLON .)


state 128

    (54) return_stmt -> RETURN expression . SEMICOLON

    SEMICOLON       shift and go to state 136


state 129

    (30) expression_stmt -> COUT L_SHIFT QUOTES . ID QUOTES SEMICOLON
    (31) expression_stmt -> COUT L_SHIFT QUOTES . ID QUOTES L_SHIFT ENDL SEMICOLON

    ID              shift and go to state 137


state 130

    (32) expression_stmt -> COUT L_SHIFT STRING . SEMICOLON
    (33) expression_stmt -> COUT L_SHIFT STRING . L_SHIFT ENDL SEMICOLON

    SEMICOLON       shift and go to state 139
    L_SHIFT         shift and go to state 138


state 131

    (34) expression_stmt -> COUT L_SHIFT var . SEMICOLON
    (35) expression_stmt -> COUT L_SHIFT var . L_SHIFT ENDL SEMICOLON
    (36) expression_stmt -> COUT L_SHIFT var . L_SHIFT var SEMICOLON
    (37) expression_stmt -> COUT L_SHIFT var . L_SHIFT var L_SHIFT ENDL SEMICOLON

    SEMICOLON       shift and go to state 141
    L_SHIFT         shift and go to state 140


state 132

    (38) expression_stmt -> CIN R_SHIFT var . SEMICOLON
    (39) expression_stmt -> CIN R_SHIFT var . R_SHIFT var SEMICOLON

    SEMICOLON       shift and go to state 143
    R_SHIFT         shift and go to state 142


state 133

    (44) selection_stmt -> IF LPAREN expression . RPAREN statement
    (45) selection_stmt -> IF LPAREN expression . RPAREN statement ELSE statement

    RPAREN          shift and go to state 144


state 134

    (46) iteration_stmt -> WHILE LPAREN expression . RPAREN statement

    RPAREN          shift and go to state 145


state 135

    (48) iteration_stmt -> FOR LPAREN var . SEMICOLON expression SEMICOLON var MINUSMINUS RPAREN statement
    (49) iteration_stmt -> FOR LPAREN var . SEMICOLON expression SEMICOLON expression RPAREN statement
    (50) iteration_stmt -> FOR LPAREN var . SEMICOLON expression SEMICOLON var PLUSPLUS RPAREN statement
    (51) iteration_stmt -> FOR LPAREN var . SEMICOLON expression SEMICOLON PLUSPLUS var RPAREN statement
    (52) iteration_stmt -> FOR LPAREN var . SEMICOLON expression SEMICOLON MINUSMINUS var RPAREN statement

    SEMICOLON       shift and go to state 146


state 136

    (54) return_stmt -> RETURN expression SEMICOLON .

    RBLOCK          reduce using rule 54 (return_stmt -> RETURN expression SEMICOLON .)
    SEMICOLON       reduce using rule 54 (return_stmt -> RETURN expression SEMICOLON .)
    COUT            reduce using rule 54 (return_stmt -> RETURN expression SEMICOLON .)
    CIN             reduce using rule 54 (return_stmt -> RETURN expression SEMICOLON .)
    ID              reduce using rule 54 (return_stmt -> RETURN expression SEMICOLON .)
    PLUSPLUS        reduce using rule 54 (return_stmt -> RETURN expression SEMICOLON .)
    MINUSMINUS      reduce using rule 54 (return_stmt -> RETURN expression SEMICOLON .)
    LBLOCK          reduce using rule 54 (return_stmt -> RETURN expression SEMICOLON .)
    IF              reduce using rule 54 (return_stmt -> RETURN expression SEMICOLON .)
    WHILE           reduce using rule 54 (return_stmt -> RETURN expression SEMICOLON .)
    FOR             reduce using rule 54 (return_stmt -> RETURN expression SEMICOLON .)
    RETURN          reduce using rule 54 (return_stmt -> RETURN expression SEMICOLON .)
    LPAREN          reduce using rule 54 (return_stmt -> RETURN expression SEMICOLON .)
    NUMBER          reduce using rule 54 (return_stmt -> RETURN expression SEMICOLON .)
    ELSE            reduce using rule 54 (return_stmt -> RETURN expression SEMICOLON .)


state 137

    (30) expression_stmt -> COUT L_SHIFT QUOTES ID . QUOTES SEMICOLON
    (31) expression_stmt -> COUT L_SHIFT QUOTES ID . QUOTES L_SHIFT ENDL SEMICOLON

    QUOTES          shift and go to state 147


state 138

    (33) expression_stmt -> COUT L_SHIFT STRING L_SHIFT . ENDL SEMICOLON

    ENDL            shift and go to state 148


state 139

    (32) expression_stmt -> COUT L_SHIFT STRING SEMICOLON .

    RBLOCK          reduce using rule 32 (expression_stmt -> COUT L_SHIFT STRING SEMICOLON .)
    SEMICOLON       reduce using rule 32 (expression_stmt -> COUT L_SHIFT STRING SEMICOLON .)
    COUT            reduce using rule 32 (expression_stmt -> COUT L_SHIFT STRING SEMICOLON .)
    CIN             reduce using rule 32 (expression_stmt -> COUT L_SHIFT STRING SEMICOLON .)
    ID              reduce using rule 32 (expression_stmt -> COUT L_SHIFT STRING SEMICOLON .)
    PLUSPLUS        reduce using rule 32 (expression_stmt -> COUT L_SHIFT STRING SEMICOLON .)
    MINUSMINUS      reduce using rule 32 (expression_stmt -> COUT L_SHIFT STRING SEMICOLON .)
    LBLOCK          reduce using rule 32 (expression_stmt -> COUT L_SHIFT STRING SEMICOLON .)
    IF              reduce using rule 32 (expression_stmt -> COUT L_SHIFT STRING SEMICOLON .)
    WHILE           reduce using rule 32 (expression_stmt -> COUT L_SHIFT STRING SEMICOLON .)
    FOR             reduce using rule 32 (expression_stmt -> COUT L_SHIFT STRING SEMICOLON .)
    RETURN          reduce using rule 32 (expression_stmt -> COUT L_SHIFT STRING SEMICOLON .)
    LPAREN          reduce using rule 32 (expression_stmt -> COUT L_SHIFT STRING SEMICOLON .)
    NUMBER          reduce using rule 32 (expression_stmt -> COUT L_SHIFT STRING SEMICOLON .)
    ELSE            reduce using rule 32 (expression_stmt -> COUT L_SHIFT STRING SEMICOLON .)


state 140

    (35) expression_stmt -> COUT L_SHIFT var L_SHIFT . ENDL SEMICOLON
    (36) expression_stmt -> COUT L_SHIFT var L_SHIFT . var SEMICOLON
    (37) expression_stmt -> COUT L_SHIFT var L_SHIFT . var L_SHIFT ENDL SEMICOLON
    (63) var -> . ID
    (64) var -> . ID LBRACKET expression RBRACKET

    ENDL            shift and go to state 150
    ID              shift and go to state 25

    var                            shift and go to state 149

state 141

    (34) expression_stmt -> COUT L_SHIFT var SEMICOLON .

    RBLOCK          reduce using rule 34 (expression_stmt -> COUT L_SHIFT var SEMICOLON .)
    SEMICOLON       reduce using rule 34 (expression_stmt -> COUT L_SHIFT var SEMICOLON .)
    COUT            reduce using rule 34 (expression_stmt -> COUT L_SHIFT var SEMICOLON .)
    CIN             reduce using rule 34 (expression_stmt -> COUT L_SHIFT var SEMICOLON .)
    ID              reduce using rule 34 (expression_stmt -> COUT L_SHIFT var SEMICOLON .)
    PLUSPLUS        reduce using rule 34 (expression_stmt -> COUT L_SHIFT var SEMICOLON .)
    MINUSMINUS      reduce using rule 34 (expression_stmt -> COUT L_SHIFT var SEMICOLON .)
    LBLOCK          reduce using rule 34 (expression_stmt -> COUT L_SHIFT var SEMICOLON .)
    IF              reduce using rule 34 (expression_stmt -> COUT L_SHIFT var SEMICOLON .)
    WHILE           reduce using rule 34 (expression_stmt -> COUT L_SHIFT var SEMICOLON .)
    FOR             reduce using rule 34 (expression_stmt -> COUT L_SHIFT var SEMICOLON .)
    RETURN          reduce using rule 34 (expression_stmt -> COUT L_SHIFT var SEMICOLON .)
    LPAREN          reduce using rule 34 (expression_stmt -> COUT L_SHIFT var SEMICOLON .)
    NUMBER          reduce using rule 34 (expression_stmt -> COUT L_SHIFT var SEMICOLON .)
    ELSE            reduce using rule 34 (expression_stmt -> COUT L_SHIFT var SEMICOLON .)


state 142

    (39) expression_stmt -> CIN R_SHIFT var R_SHIFT . var SEMICOLON
    (63) var -> . ID
    (64) var -> . ID LBRACKET expression RBRACKET

    ID              shift and go to state 25

    var                            shift and go to state 151

state 143

    (38) expression_stmt -> CIN R_SHIFT var SEMICOLON .

    RBLOCK          reduce using rule 38 (expression_stmt -> CIN R_SHIFT var SEMICOLON .)
    SEMICOLON       reduce using rule 38 (expression_stmt -> CIN R_SHIFT var SEMICOLON .)
    COUT            reduce using rule 38 (expression_stmt -> CIN R_SHIFT var SEMICOLON .)
    CIN             reduce using rule 38 (expression_stmt -> CIN R_SHIFT var SEMICOLON .)
    ID              reduce using rule 38 (expression_stmt -> CIN R_SHIFT var SEMICOLON .)
    PLUSPLUS        reduce using rule 38 (expression_stmt -> CIN R_SHIFT var SEMICOLON .)
    MINUSMINUS      reduce using rule 38 (expression_stmt -> CIN R_SHIFT var SEMICOLON .)
    LBLOCK          reduce using rule 38 (expression_stmt -> CIN R_SHIFT var SEMICOLON .)
    IF              reduce using rule 38 (expression_stmt -> CIN R_SHIFT var SEMICOLON .)
    WHILE           reduce using rule 38 (expression_stmt -> CIN R_SHIFT var SEMICOLON .)
    FOR             reduce using rule 38 (expression_stmt -> CIN R_SHIFT var SEMICOLON .)
    RETURN          reduce using rule 38 (expression_stmt -> CIN R_SHIFT var SEMICOLON .)
    LPAREN          reduce using rule 38 (expression_stmt -> CIN R_SHIFT var SEMICOLON .)
    NUMBER          reduce using rule 38 (expression_stmt -> CIN R_SHIFT var SEMICOLON .)
    ELSE            reduce using rule 38 (expression_stmt -> CIN R_SHIFT var SEMICOLON .)


state 144

    (44) selection_stmt -> IF LPAREN expression RPAREN . statement
    (45) selection_stmt -> IF LPAREN expression RPAREN . statement ELSE statement
    (23) statement -> . expression_stmt
    (24) statement -> . compount_stmt
    (25) statement -> . selection_stmt
    (26) statement -> . iteration_stmt
    (27) statement -> . return_stmt
    (28) expression_stmt -> . expression SEMICOLON
    (29) expression_stmt -> . SEMICOLON
    (30) expression_stmt -> . COUT L_SHIFT QUOTES ID QUOTES SEMICOLON
    (31) expression_stmt -> . COUT L_SHIFT QUOTES ID QUOTES L_SHIFT ENDL SEMICOLON
    (32) expression_stmt -> . COUT L_SHIFT STRING SEMICOLON
    (33) expression_stmt -> . COUT L_SHIFT STRING L_SHIFT ENDL SEMICOLON
    (34) expression_stmt -> . COUT L_SHIFT var SEMICOLON
    (35) expression_stmt -> . COUT L_SHIFT var L_SHIFT ENDL SEMICOLON
    (36) expression_stmt -> . COUT L_SHIFT var L_SHIFT var SEMICOLON
    (37) expression_stmt -> . COUT L_SHIFT var L_SHIFT var L_SHIFT ENDL SEMICOLON
    (38) expression_stmt -> . CIN R_SHIFT var SEMICOLON
    (39) expression_stmt -> . CIN R_SHIFT var R_SHIFT var SEMICOLON
    (40) expression_stmt -> . ID PLUSPLUS
    (41) expression_stmt -> . PLUSPLUS ID
    (42) expression_stmt -> . ID MINUSMINUS
    (43) expression_stmt -> . MINUSMINUS ID
    (18) compount_stmt -> . LBLOCK local_declarations statement_list RBLOCK
    (44) selection_stmt -> . IF LPAREN expression RPAREN statement
    (45) selection_stmt -> . IF LPAREN expression RPAREN statement ELSE statement
    (46) iteration_stmt -> . WHILE LPAREN expression RPAREN statement
    (47) iteration_stmt -> .
    (48) iteration_stmt -> . FOR LPAREN var SEMICOLON expression SEMICOLON var MINUSMINUS RPAREN statement
    (49) iteration_stmt -> . FOR LPAREN var SEMICOLON expression SEMICOLON expression RPAREN statement
    (50) iteration_stmt -> . FOR LPAREN var SEMICOLON expression SEMICOLON var PLUSPLUS RPAREN statement
    (51) iteration_stmt -> . FOR LPAREN var SEMICOLON expression SEMICOLON PLUSPLUS var RPAREN statement
    (52) iteration_stmt -> . FOR LPAREN var SEMICOLON expression SEMICOLON MINUSMINUS var RPAREN statement
    (53) return_stmt -> . RETURN SEMICOLON
    (54) return_stmt -> . RETURN expression SEMICOLON
    (55) expression -> . var EQUAL expression
    (56) expression -> . simple_expression
    (63) var -> . ID
    (64) var -> . ID LBRACKET expression RBRACKET
    (65) simple_expression -> . additive_expression relop additive_expression
    (66) simple_expression -> . additive_expression
    (74) additive_expression -> . additive_expression addop term
    (75) additive_expression -> . term
    (78) term -> . term mulop factor
    (79) term -> . factor
    (82) factor -> . LPAREN expression RPAREN
    (83) factor -> . var
    (84) factor -> . call
    (85) factor -> . NUMBER
    (86) call -> . ID LPAREN args RPAREN

  ! shift/reduce conflict for SEMICOLON resolved as shift
  ! shift/reduce conflict for COUT resolved as shift
  ! shift/reduce conflict for CIN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for PLUSPLUS resolved as shift
  ! shift/reduce conflict for MINUSMINUS resolved as shift
  ! shift/reduce conflict for LBLOCK resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
    SEMICOLON       shift and go to state 105
    COUT            shift and go to state 106
    CIN             shift and go to state 108
    ID              shift and go to state 107
    PLUSPLUS        shift and go to state 109
    MINUSMINUS      shift and go to state 110
    LBLOCK          shift and go to state 58
    IF              shift and go to state 111
    WHILE           shift and go to state 112
    ELSE            reduce using rule 47 (iteration_stmt -> .)
    RBLOCK          reduce using rule 47 (iteration_stmt -> .)
    FOR             shift and go to state 113
    RETURN          shift and go to state 114
    LPAREN          shift and go to state 52
    NUMBER          shift and go to state 54

  ! SEMICOLON       [ reduce using rule 47 (iteration_stmt -> .) ]
  ! COUT            [ reduce using rule 47 (iteration_stmt -> .) ]
  ! CIN             [ reduce using rule 47 (iteration_stmt -> .) ]
  ! ID              [ reduce using rule 47 (iteration_stmt -> .) ]
  ! PLUSPLUS        [ reduce using rule 47 (iteration_stmt -> .) ]
  ! MINUSMINUS      [ reduce using rule 47 (iteration_stmt -> .) ]
  ! LBLOCK          [ reduce using rule 47 (iteration_stmt -> .) ]
  ! IF              [ reduce using rule 47 (iteration_stmt -> .) ]
  ! WHILE           [ reduce using rule 47 (iteration_stmt -> .) ]
  ! FOR             [ reduce using rule 47 (iteration_stmt -> .) ]
  ! RETURN          [ reduce using rule 47 (iteration_stmt -> .) ]
  ! LPAREN          [ reduce using rule 47 (iteration_stmt -> .) ]
  ! NUMBER          [ reduce using rule 47 (iteration_stmt -> .) ]

    expression                     shift and go to state 104
    statement                      shift and go to state 152
    expression_stmt                shift and go to state 99
    compount_stmt                  shift and go to state 100
    selection_stmt                 shift and go to state 101
    iteration_stmt                 shift and go to state 102
    return_stmt                    shift and go to state 103
    var                            shift and go to state 47
    simple_expression              shift and go to state 48
    additive_expression            shift and go to state 49
    term                           shift and go to state 50
    factor                         shift and go to state 51
    call                           shift and go to state 53

state 145

    (46) iteration_stmt -> WHILE LPAREN expression RPAREN . statement
    (23) statement -> . expression_stmt
    (24) statement -> . compount_stmt
    (25) statement -> . selection_stmt
    (26) statement -> . iteration_stmt
    (27) statement -> . return_stmt
    (28) expression_stmt -> . expression SEMICOLON
    (29) expression_stmt -> . SEMICOLON
    (30) expression_stmt -> . COUT L_SHIFT QUOTES ID QUOTES SEMICOLON
    (31) expression_stmt -> . COUT L_SHIFT QUOTES ID QUOTES L_SHIFT ENDL SEMICOLON
    (32) expression_stmt -> . COUT L_SHIFT STRING SEMICOLON
    (33) expression_stmt -> . COUT L_SHIFT STRING L_SHIFT ENDL SEMICOLON
    (34) expression_stmt -> . COUT L_SHIFT var SEMICOLON
    (35) expression_stmt -> . COUT L_SHIFT var L_SHIFT ENDL SEMICOLON
    (36) expression_stmt -> . COUT L_SHIFT var L_SHIFT var SEMICOLON
    (37) expression_stmt -> . COUT L_SHIFT var L_SHIFT var L_SHIFT ENDL SEMICOLON
    (38) expression_stmt -> . CIN R_SHIFT var SEMICOLON
    (39) expression_stmt -> . CIN R_SHIFT var R_SHIFT var SEMICOLON
    (40) expression_stmt -> . ID PLUSPLUS
    (41) expression_stmt -> . PLUSPLUS ID
    (42) expression_stmt -> . ID MINUSMINUS
    (43) expression_stmt -> . MINUSMINUS ID
    (18) compount_stmt -> . LBLOCK local_declarations statement_list RBLOCK
    (44) selection_stmt -> . IF LPAREN expression RPAREN statement
    (45) selection_stmt -> . IF LPAREN expression RPAREN statement ELSE statement
    (46) iteration_stmt -> . WHILE LPAREN expression RPAREN statement
    (47) iteration_stmt -> .
    (48) iteration_stmt -> . FOR LPAREN var SEMICOLON expression SEMICOLON var MINUSMINUS RPAREN statement
    (49) iteration_stmt -> . FOR LPAREN var SEMICOLON expression SEMICOLON expression RPAREN statement
    (50) iteration_stmt -> . FOR LPAREN var SEMICOLON expression SEMICOLON var PLUSPLUS RPAREN statement
    (51) iteration_stmt -> . FOR LPAREN var SEMICOLON expression SEMICOLON PLUSPLUS var RPAREN statement
    (52) iteration_stmt -> . FOR LPAREN var SEMICOLON expression SEMICOLON MINUSMINUS var RPAREN statement
    (53) return_stmt -> . RETURN SEMICOLON
    (54) return_stmt -> . RETURN expression SEMICOLON
    (55) expression -> . var EQUAL expression
    (56) expression -> . simple_expression
    (63) var -> . ID
    (64) var -> . ID LBRACKET expression RBRACKET
    (65) simple_expression -> . additive_expression relop additive_expression
    (66) simple_expression -> . additive_expression
    (74) additive_expression -> . additive_expression addop term
    (75) additive_expression -> . term
    (78) term -> . term mulop factor
    (79) term -> . factor
    (82) factor -> . LPAREN expression RPAREN
    (83) factor -> . var
    (84) factor -> . call
    (85) factor -> . NUMBER
    (86) call -> . ID LPAREN args RPAREN

  ! shift/reduce conflict for SEMICOLON resolved as shift
  ! shift/reduce conflict for COUT resolved as shift
  ! shift/reduce conflict for CIN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for PLUSPLUS resolved as shift
  ! shift/reduce conflict for MINUSMINUS resolved as shift
  ! shift/reduce conflict for LBLOCK resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
    SEMICOLON       shift and go to state 105
    COUT            shift and go to state 106
    CIN             shift and go to state 108
    ID              shift and go to state 107
    PLUSPLUS        shift and go to state 109
    MINUSMINUS      shift and go to state 110
    LBLOCK          shift and go to state 58
    IF              shift and go to state 111
    WHILE           shift and go to state 112
    ELSE            reduce using rule 47 (iteration_stmt -> .)
    RBLOCK          reduce using rule 47 (iteration_stmt -> .)
    FOR             shift and go to state 113
    RETURN          shift and go to state 114
    LPAREN          shift and go to state 52
    NUMBER          shift and go to state 54

  ! SEMICOLON       [ reduce using rule 47 (iteration_stmt -> .) ]
  ! COUT            [ reduce using rule 47 (iteration_stmt -> .) ]
  ! CIN             [ reduce using rule 47 (iteration_stmt -> .) ]
  ! ID              [ reduce using rule 47 (iteration_stmt -> .) ]
  ! PLUSPLUS        [ reduce using rule 47 (iteration_stmt -> .) ]
  ! MINUSMINUS      [ reduce using rule 47 (iteration_stmt -> .) ]
  ! LBLOCK          [ reduce using rule 47 (iteration_stmt -> .) ]
  ! IF              [ reduce using rule 47 (iteration_stmt -> .) ]
  ! WHILE           [ reduce using rule 47 (iteration_stmt -> .) ]
  ! FOR             [ reduce using rule 47 (iteration_stmt -> .) ]
  ! RETURN          [ reduce using rule 47 (iteration_stmt -> .) ]
  ! LPAREN          [ reduce using rule 47 (iteration_stmt -> .) ]
  ! NUMBER          [ reduce using rule 47 (iteration_stmt -> .) ]

    expression                     shift and go to state 104
    statement                      shift and go to state 153
    expression_stmt                shift and go to state 99
    compount_stmt                  shift and go to state 100
    selection_stmt                 shift and go to state 101
    iteration_stmt                 shift and go to state 102
    return_stmt                    shift and go to state 103
    var                            shift and go to state 47
    simple_expression              shift and go to state 48
    additive_expression            shift and go to state 49
    term                           shift and go to state 50
    factor                         shift and go to state 51
    call                           shift and go to state 53

state 146

    (48) iteration_stmt -> FOR LPAREN var SEMICOLON . expression SEMICOLON var MINUSMINUS RPAREN statement
    (49) iteration_stmt -> FOR LPAREN var SEMICOLON . expression SEMICOLON expression RPAREN statement
    (50) iteration_stmt -> FOR LPAREN var SEMICOLON . expression SEMICOLON var PLUSPLUS RPAREN statement
    (51) iteration_stmt -> FOR LPAREN var SEMICOLON . expression SEMICOLON PLUSPLUS var RPAREN statement
    (52) iteration_stmt -> FOR LPAREN var SEMICOLON . expression SEMICOLON MINUSMINUS var RPAREN statement
    (55) expression -> . var EQUAL expression
    (56) expression -> . simple_expression
    (63) var -> . ID
    (64) var -> . ID LBRACKET expression RBRACKET
    (65) simple_expression -> . additive_expression relop additive_expression
    (66) simple_expression -> . additive_expression
    (74) additive_expression -> . additive_expression addop term
    (75) additive_expression -> . term
    (78) term -> . term mulop factor
    (79) term -> . factor
    (82) factor -> . LPAREN expression RPAREN
    (83) factor -> . var
    (84) factor -> . call
    (85) factor -> . NUMBER
    (86) call -> . ID LPAREN args RPAREN

    ID              shift and go to state 45
    LPAREN          shift and go to state 52
    NUMBER          shift and go to state 54

    var                            shift and go to state 47
    expression                     shift and go to state 154
    simple_expression              shift and go to state 48
    additive_expression            shift and go to state 49
    term                           shift and go to state 50
    factor                         shift and go to state 51
    call                           shift and go to state 53

state 147

    (30) expression_stmt -> COUT L_SHIFT QUOTES ID QUOTES . SEMICOLON
    (31) expression_stmt -> COUT L_SHIFT QUOTES ID QUOTES . L_SHIFT ENDL SEMICOLON

    SEMICOLON       shift and go to state 156
    L_SHIFT         shift and go to state 155


state 148

    (33) expression_stmt -> COUT L_SHIFT STRING L_SHIFT ENDL . SEMICOLON

    SEMICOLON       shift and go to state 157


state 149

    (36) expression_stmt -> COUT L_SHIFT var L_SHIFT var . SEMICOLON
    (37) expression_stmt -> COUT L_SHIFT var L_SHIFT var . L_SHIFT ENDL SEMICOLON

    SEMICOLON       shift and go to state 159
    L_SHIFT         shift and go to state 158


state 150

    (35) expression_stmt -> COUT L_SHIFT var L_SHIFT ENDL . SEMICOLON

    SEMICOLON       shift and go to state 160


state 151

    (39) expression_stmt -> CIN R_SHIFT var R_SHIFT var . SEMICOLON

    SEMICOLON       shift and go to state 161


state 152

    (44) selection_stmt -> IF LPAREN expression RPAREN statement .
    (45) selection_stmt -> IF LPAREN expression RPAREN statement . ELSE statement

  ! shift/reduce conflict for ELSE resolved as shift
    RBLOCK          reduce using rule 44 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    SEMICOLON       reduce using rule 44 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    COUT            reduce using rule 44 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    CIN             reduce using rule 44 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    ID              reduce using rule 44 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    PLUSPLUS        reduce using rule 44 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    MINUSMINUS      reduce using rule 44 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    LBLOCK          reduce using rule 44 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    IF              reduce using rule 44 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    WHILE           reduce using rule 44 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    FOR             reduce using rule 44 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    RETURN          reduce using rule 44 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    LPAREN          reduce using rule 44 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    NUMBER          reduce using rule 44 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    ELSE            shift and go to state 162

  ! ELSE            [ reduce using rule 44 (selection_stmt -> IF LPAREN expression RPAREN statement .) ]


state 153

    (46) iteration_stmt -> WHILE LPAREN expression RPAREN statement .

    RBLOCK          reduce using rule 46 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    SEMICOLON       reduce using rule 46 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    COUT            reduce using rule 46 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    CIN             reduce using rule 46 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    ID              reduce using rule 46 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    PLUSPLUS        reduce using rule 46 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    MINUSMINUS      reduce using rule 46 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    LBLOCK          reduce using rule 46 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    IF              reduce using rule 46 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    WHILE           reduce using rule 46 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    FOR             reduce using rule 46 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    RETURN          reduce using rule 46 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    LPAREN          reduce using rule 46 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    NUMBER          reduce using rule 46 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    ELSE            reduce using rule 46 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)


state 154

    (48) iteration_stmt -> FOR LPAREN var SEMICOLON expression . SEMICOLON var MINUSMINUS RPAREN statement
    (49) iteration_stmt -> FOR LPAREN var SEMICOLON expression . SEMICOLON expression RPAREN statement
    (50) iteration_stmt -> FOR LPAREN var SEMICOLON expression . SEMICOLON var PLUSPLUS RPAREN statement
    (51) iteration_stmt -> FOR LPAREN var SEMICOLON expression . SEMICOLON PLUSPLUS var RPAREN statement
    (52) iteration_stmt -> FOR LPAREN var SEMICOLON expression . SEMICOLON MINUSMINUS var RPAREN statement

    SEMICOLON       shift and go to state 163


state 155

    (31) expression_stmt -> COUT L_SHIFT QUOTES ID QUOTES L_SHIFT . ENDL SEMICOLON

    ENDL            shift and go to state 164


state 156

    (30) expression_stmt -> COUT L_SHIFT QUOTES ID QUOTES SEMICOLON .

    RBLOCK          reduce using rule 30 (expression_stmt -> COUT L_SHIFT QUOTES ID QUOTES SEMICOLON .)
    SEMICOLON       reduce using rule 30 (expression_stmt -> COUT L_SHIFT QUOTES ID QUOTES SEMICOLON .)
    COUT            reduce using rule 30 (expression_stmt -> COUT L_SHIFT QUOTES ID QUOTES SEMICOLON .)
    CIN             reduce using rule 30 (expression_stmt -> COUT L_SHIFT QUOTES ID QUOTES SEMICOLON .)
    ID              reduce using rule 30 (expression_stmt -> COUT L_SHIFT QUOTES ID QUOTES SEMICOLON .)
    PLUSPLUS        reduce using rule 30 (expression_stmt -> COUT L_SHIFT QUOTES ID QUOTES SEMICOLON .)
    MINUSMINUS      reduce using rule 30 (expression_stmt -> COUT L_SHIFT QUOTES ID QUOTES SEMICOLON .)
    LBLOCK          reduce using rule 30 (expression_stmt -> COUT L_SHIFT QUOTES ID QUOTES SEMICOLON .)
    IF              reduce using rule 30 (expression_stmt -> COUT L_SHIFT QUOTES ID QUOTES SEMICOLON .)
    WHILE           reduce using rule 30 (expression_stmt -> COUT L_SHIFT QUOTES ID QUOTES SEMICOLON .)
    FOR             reduce using rule 30 (expression_stmt -> COUT L_SHIFT QUOTES ID QUOTES SEMICOLON .)
    RETURN          reduce using rule 30 (expression_stmt -> COUT L_SHIFT QUOTES ID QUOTES SEMICOLON .)
    LPAREN          reduce using rule 30 (expression_stmt -> COUT L_SHIFT QUOTES ID QUOTES SEMICOLON .)
    NUMBER          reduce using rule 30 (expression_stmt -> COUT L_SHIFT QUOTES ID QUOTES SEMICOLON .)
    ELSE            reduce using rule 30 (expression_stmt -> COUT L_SHIFT QUOTES ID QUOTES SEMICOLON .)


state 157

    (33) expression_stmt -> COUT L_SHIFT STRING L_SHIFT ENDL SEMICOLON .

    RBLOCK          reduce using rule 33 (expression_stmt -> COUT L_SHIFT STRING L_SHIFT ENDL SEMICOLON .)
    SEMICOLON       reduce using rule 33 (expression_stmt -> COUT L_SHIFT STRING L_SHIFT ENDL SEMICOLON .)
    COUT            reduce using rule 33 (expression_stmt -> COUT L_SHIFT STRING L_SHIFT ENDL SEMICOLON .)
    CIN             reduce using rule 33 (expression_stmt -> COUT L_SHIFT STRING L_SHIFT ENDL SEMICOLON .)
    ID              reduce using rule 33 (expression_stmt -> COUT L_SHIFT STRING L_SHIFT ENDL SEMICOLON .)
    PLUSPLUS        reduce using rule 33 (expression_stmt -> COUT L_SHIFT STRING L_SHIFT ENDL SEMICOLON .)
    MINUSMINUS      reduce using rule 33 (expression_stmt -> COUT L_SHIFT STRING L_SHIFT ENDL SEMICOLON .)
    LBLOCK          reduce using rule 33 (expression_stmt -> COUT L_SHIFT STRING L_SHIFT ENDL SEMICOLON .)
    IF              reduce using rule 33 (expression_stmt -> COUT L_SHIFT STRING L_SHIFT ENDL SEMICOLON .)
    WHILE           reduce using rule 33 (expression_stmt -> COUT L_SHIFT STRING L_SHIFT ENDL SEMICOLON .)
    FOR             reduce using rule 33 (expression_stmt -> COUT L_SHIFT STRING L_SHIFT ENDL SEMICOLON .)
    RETURN          reduce using rule 33 (expression_stmt -> COUT L_SHIFT STRING L_SHIFT ENDL SEMICOLON .)
    LPAREN          reduce using rule 33 (expression_stmt -> COUT L_SHIFT STRING L_SHIFT ENDL SEMICOLON .)
    NUMBER          reduce using rule 33 (expression_stmt -> COUT L_SHIFT STRING L_SHIFT ENDL SEMICOLON .)
    ELSE            reduce using rule 33 (expression_stmt -> COUT L_SHIFT STRING L_SHIFT ENDL SEMICOLON .)


state 158

    (37) expression_stmt -> COUT L_SHIFT var L_SHIFT var L_SHIFT . ENDL SEMICOLON

    ENDL            shift and go to state 165


state 159

    (36) expression_stmt -> COUT L_SHIFT var L_SHIFT var SEMICOLON .

    RBLOCK          reduce using rule 36 (expression_stmt -> COUT L_SHIFT var L_SHIFT var SEMICOLON .)
    SEMICOLON       reduce using rule 36 (expression_stmt -> COUT L_SHIFT var L_SHIFT var SEMICOLON .)
    COUT            reduce using rule 36 (expression_stmt -> COUT L_SHIFT var L_SHIFT var SEMICOLON .)
    CIN             reduce using rule 36 (expression_stmt -> COUT L_SHIFT var L_SHIFT var SEMICOLON .)
    ID              reduce using rule 36 (expression_stmt -> COUT L_SHIFT var L_SHIFT var SEMICOLON .)
    PLUSPLUS        reduce using rule 36 (expression_stmt -> COUT L_SHIFT var L_SHIFT var SEMICOLON .)
    MINUSMINUS      reduce using rule 36 (expression_stmt -> COUT L_SHIFT var L_SHIFT var SEMICOLON .)
    LBLOCK          reduce using rule 36 (expression_stmt -> COUT L_SHIFT var L_SHIFT var SEMICOLON .)
    IF              reduce using rule 36 (expression_stmt -> COUT L_SHIFT var L_SHIFT var SEMICOLON .)
    WHILE           reduce using rule 36 (expression_stmt -> COUT L_SHIFT var L_SHIFT var SEMICOLON .)
    FOR             reduce using rule 36 (expression_stmt -> COUT L_SHIFT var L_SHIFT var SEMICOLON .)
    RETURN          reduce using rule 36 (expression_stmt -> COUT L_SHIFT var L_SHIFT var SEMICOLON .)
    LPAREN          reduce using rule 36 (expression_stmt -> COUT L_SHIFT var L_SHIFT var SEMICOLON .)
    NUMBER          reduce using rule 36 (expression_stmt -> COUT L_SHIFT var L_SHIFT var SEMICOLON .)
    ELSE            reduce using rule 36 (expression_stmt -> COUT L_SHIFT var L_SHIFT var SEMICOLON .)


state 160

    (35) expression_stmt -> COUT L_SHIFT var L_SHIFT ENDL SEMICOLON .

    RBLOCK          reduce using rule 35 (expression_stmt -> COUT L_SHIFT var L_SHIFT ENDL SEMICOLON .)
    SEMICOLON       reduce using rule 35 (expression_stmt -> COUT L_SHIFT var L_SHIFT ENDL SEMICOLON .)
    COUT            reduce using rule 35 (expression_stmt -> COUT L_SHIFT var L_SHIFT ENDL SEMICOLON .)
    CIN             reduce using rule 35 (expression_stmt -> COUT L_SHIFT var L_SHIFT ENDL SEMICOLON .)
    ID              reduce using rule 35 (expression_stmt -> COUT L_SHIFT var L_SHIFT ENDL SEMICOLON .)
    PLUSPLUS        reduce using rule 35 (expression_stmt -> COUT L_SHIFT var L_SHIFT ENDL SEMICOLON .)
    MINUSMINUS      reduce using rule 35 (expression_stmt -> COUT L_SHIFT var L_SHIFT ENDL SEMICOLON .)
    LBLOCK          reduce using rule 35 (expression_stmt -> COUT L_SHIFT var L_SHIFT ENDL SEMICOLON .)
    IF              reduce using rule 35 (expression_stmt -> COUT L_SHIFT var L_SHIFT ENDL SEMICOLON .)
    WHILE           reduce using rule 35 (expression_stmt -> COUT L_SHIFT var L_SHIFT ENDL SEMICOLON .)
    FOR             reduce using rule 35 (expression_stmt -> COUT L_SHIFT var L_SHIFT ENDL SEMICOLON .)
    RETURN          reduce using rule 35 (expression_stmt -> COUT L_SHIFT var L_SHIFT ENDL SEMICOLON .)
    LPAREN          reduce using rule 35 (expression_stmt -> COUT L_SHIFT var L_SHIFT ENDL SEMICOLON .)
    NUMBER          reduce using rule 35 (expression_stmt -> COUT L_SHIFT var L_SHIFT ENDL SEMICOLON .)
    ELSE            reduce using rule 35 (expression_stmt -> COUT L_SHIFT var L_SHIFT ENDL SEMICOLON .)


state 161

    (39) expression_stmt -> CIN R_SHIFT var R_SHIFT var SEMICOLON .

    RBLOCK          reduce using rule 39 (expression_stmt -> CIN R_SHIFT var R_SHIFT var SEMICOLON .)
    SEMICOLON       reduce using rule 39 (expression_stmt -> CIN R_SHIFT var R_SHIFT var SEMICOLON .)
    COUT            reduce using rule 39 (expression_stmt -> CIN R_SHIFT var R_SHIFT var SEMICOLON .)
    CIN             reduce using rule 39 (expression_stmt -> CIN R_SHIFT var R_SHIFT var SEMICOLON .)
    ID              reduce using rule 39 (expression_stmt -> CIN R_SHIFT var R_SHIFT var SEMICOLON .)
    PLUSPLUS        reduce using rule 39 (expression_stmt -> CIN R_SHIFT var R_SHIFT var SEMICOLON .)
    MINUSMINUS      reduce using rule 39 (expression_stmt -> CIN R_SHIFT var R_SHIFT var SEMICOLON .)
    LBLOCK          reduce using rule 39 (expression_stmt -> CIN R_SHIFT var R_SHIFT var SEMICOLON .)
    IF              reduce using rule 39 (expression_stmt -> CIN R_SHIFT var R_SHIFT var SEMICOLON .)
    WHILE           reduce using rule 39 (expression_stmt -> CIN R_SHIFT var R_SHIFT var SEMICOLON .)
    FOR             reduce using rule 39 (expression_stmt -> CIN R_SHIFT var R_SHIFT var SEMICOLON .)
    RETURN          reduce using rule 39 (expression_stmt -> CIN R_SHIFT var R_SHIFT var SEMICOLON .)
    LPAREN          reduce using rule 39 (expression_stmt -> CIN R_SHIFT var R_SHIFT var SEMICOLON .)
    NUMBER          reduce using rule 39 (expression_stmt -> CIN R_SHIFT var R_SHIFT var SEMICOLON .)
    ELSE            reduce using rule 39 (expression_stmt -> CIN R_SHIFT var R_SHIFT var SEMICOLON .)


state 162

    (45) selection_stmt -> IF LPAREN expression RPAREN statement ELSE . statement
    (23) statement -> . expression_stmt
    (24) statement -> . compount_stmt
    (25) statement -> . selection_stmt
    (26) statement -> . iteration_stmt
    (27) statement -> . return_stmt
    (28) expression_stmt -> . expression SEMICOLON
    (29) expression_stmt -> . SEMICOLON
    (30) expression_stmt -> . COUT L_SHIFT QUOTES ID QUOTES SEMICOLON
    (31) expression_stmt -> . COUT L_SHIFT QUOTES ID QUOTES L_SHIFT ENDL SEMICOLON
    (32) expression_stmt -> . COUT L_SHIFT STRING SEMICOLON
    (33) expression_stmt -> . COUT L_SHIFT STRING L_SHIFT ENDL SEMICOLON
    (34) expression_stmt -> . COUT L_SHIFT var SEMICOLON
    (35) expression_stmt -> . COUT L_SHIFT var L_SHIFT ENDL SEMICOLON
    (36) expression_stmt -> . COUT L_SHIFT var L_SHIFT var SEMICOLON
    (37) expression_stmt -> . COUT L_SHIFT var L_SHIFT var L_SHIFT ENDL SEMICOLON
    (38) expression_stmt -> . CIN R_SHIFT var SEMICOLON
    (39) expression_stmt -> . CIN R_SHIFT var R_SHIFT var SEMICOLON
    (40) expression_stmt -> . ID PLUSPLUS
    (41) expression_stmt -> . PLUSPLUS ID
    (42) expression_stmt -> . ID MINUSMINUS
    (43) expression_stmt -> . MINUSMINUS ID
    (18) compount_stmt -> . LBLOCK local_declarations statement_list RBLOCK
    (44) selection_stmt -> . IF LPAREN expression RPAREN statement
    (45) selection_stmt -> . IF LPAREN expression RPAREN statement ELSE statement
    (46) iteration_stmt -> . WHILE LPAREN expression RPAREN statement
    (47) iteration_stmt -> .
    (48) iteration_stmt -> . FOR LPAREN var SEMICOLON expression SEMICOLON var MINUSMINUS RPAREN statement
    (49) iteration_stmt -> . FOR LPAREN var SEMICOLON expression SEMICOLON expression RPAREN statement
    (50) iteration_stmt -> . FOR LPAREN var SEMICOLON expression SEMICOLON var PLUSPLUS RPAREN statement
    (51) iteration_stmt -> . FOR LPAREN var SEMICOLON expression SEMICOLON PLUSPLUS var RPAREN statement
    (52) iteration_stmt -> . FOR LPAREN var SEMICOLON expression SEMICOLON MINUSMINUS var RPAREN statement
    (53) return_stmt -> . RETURN SEMICOLON
    (54) return_stmt -> . RETURN expression SEMICOLON
    (55) expression -> . var EQUAL expression
    (56) expression -> . simple_expression
    (63) var -> . ID
    (64) var -> . ID LBRACKET expression RBRACKET
    (65) simple_expression -> . additive_expression relop additive_expression
    (66) simple_expression -> . additive_expression
    (74) additive_expression -> . additive_expression addop term
    (75) additive_expression -> . term
    (78) term -> . term mulop factor
    (79) term -> . factor
    (82) factor -> . LPAREN expression RPAREN
    (83) factor -> . var
    (84) factor -> . call
    (85) factor -> . NUMBER
    (86) call -> . ID LPAREN args RPAREN

  ! shift/reduce conflict for SEMICOLON resolved as shift
  ! shift/reduce conflict for COUT resolved as shift
  ! shift/reduce conflict for CIN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for PLUSPLUS resolved as shift
  ! shift/reduce conflict for MINUSMINUS resolved as shift
  ! shift/reduce conflict for LBLOCK resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
    SEMICOLON       shift and go to state 105
    COUT            shift and go to state 106
    CIN             shift and go to state 108
    ID              shift and go to state 107
    PLUSPLUS        shift and go to state 109
    MINUSMINUS      shift and go to state 110
    LBLOCK          shift and go to state 58
    IF              shift and go to state 111
    WHILE           shift and go to state 112
    ELSE            reduce using rule 47 (iteration_stmt -> .)
    RBLOCK          reduce using rule 47 (iteration_stmt -> .)
    FOR             shift and go to state 113
    RETURN          shift and go to state 114
    LPAREN          shift and go to state 52
    NUMBER          shift and go to state 54

  ! SEMICOLON       [ reduce using rule 47 (iteration_stmt -> .) ]
  ! COUT            [ reduce using rule 47 (iteration_stmt -> .) ]
  ! CIN             [ reduce using rule 47 (iteration_stmt -> .) ]
  ! ID              [ reduce using rule 47 (iteration_stmt -> .) ]
  ! PLUSPLUS        [ reduce using rule 47 (iteration_stmt -> .) ]
  ! MINUSMINUS      [ reduce using rule 47 (iteration_stmt -> .) ]
  ! LBLOCK          [ reduce using rule 47 (iteration_stmt -> .) ]
  ! IF              [ reduce using rule 47 (iteration_stmt -> .) ]
  ! WHILE           [ reduce using rule 47 (iteration_stmt -> .) ]
  ! FOR             [ reduce using rule 47 (iteration_stmt -> .) ]
  ! RETURN          [ reduce using rule 47 (iteration_stmt -> .) ]
  ! LPAREN          [ reduce using rule 47 (iteration_stmt -> .) ]
  ! NUMBER          [ reduce using rule 47 (iteration_stmt -> .) ]

    expression                     shift and go to state 104
    statement                      shift and go to state 166
    expression_stmt                shift and go to state 99
    compount_stmt                  shift and go to state 100
    selection_stmt                 shift and go to state 101
    iteration_stmt                 shift and go to state 102
    return_stmt                    shift and go to state 103
    var                            shift and go to state 47
    simple_expression              shift and go to state 48
    additive_expression            shift and go to state 49
    term                           shift and go to state 50
    factor                         shift and go to state 51
    call                           shift and go to state 53

state 163

    (48) iteration_stmt -> FOR LPAREN var SEMICOLON expression SEMICOLON . var MINUSMINUS RPAREN statement
    (49) iteration_stmt -> FOR LPAREN var SEMICOLON expression SEMICOLON . expression RPAREN statement
    (50) iteration_stmt -> FOR LPAREN var SEMICOLON expression SEMICOLON . var PLUSPLUS RPAREN statement
    (51) iteration_stmt -> FOR LPAREN var SEMICOLON expression SEMICOLON . PLUSPLUS var RPAREN statement
    (52) iteration_stmt -> FOR LPAREN var SEMICOLON expression SEMICOLON . MINUSMINUS var RPAREN statement
    (63) var -> . ID
    (64) var -> . ID LBRACKET expression RBRACKET
    (55) expression -> . var EQUAL expression
    (56) expression -> . simple_expression
    (65) simple_expression -> . additive_expression relop additive_expression
    (66) simple_expression -> . additive_expression
    (74) additive_expression -> . additive_expression addop term
    (75) additive_expression -> . term
    (78) term -> . term mulop factor
    (79) term -> . factor
    (82) factor -> . LPAREN expression RPAREN
    (83) factor -> . var
    (84) factor -> . call
    (85) factor -> . NUMBER
    (86) call -> . ID LPAREN args RPAREN

    PLUSPLUS        shift and go to state 170
    MINUSMINUS      shift and go to state 169
    ID              shift and go to state 45
    LPAREN          shift and go to state 52
    NUMBER          shift and go to state 54

    var                            shift and go to state 167
    expression                     shift and go to state 168
    simple_expression              shift and go to state 48
    additive_expression            shift and go to state 49
    term                           shift and go to state 50
    factor                         shift and go to state 51
    call                           shift and go to state 53

state 164

    (31) expression_stmt -> COUT L_SHIFT QUOTES ID QUOTES L_SHIFT ENDL . SEMICOLON

    SEMICOLON       shift and go to state 171


state 165

    (37) expression_stmt -> COUT L_SHIFT var L_SHIFT var L_SHIFT ENDL . SEMICOLON

    SEMICOLON       shift and go to state 172


state 166

    (45) selection_stmt -> IF LPAREN expression RPAREN statement ELSE statement .

    RBLOCK          reduce using rule 45 (selection_stmt -> IF LPAREN expression RPAREN statement ELSE statement .)
    SEMICOLON       reduce using rule 45 (selection_stmt -> IF LPAREN expression RPAREN statement ELSE statement .)
    COUT            reduce using rule 45 (selection_stmt -> IF LPAREN expression RPAREN statement ELSE statement .)
    CIN             reduce using rule 45 (selection_stmt -> IF LPAREN expression RPAREN statement ELSE statement .)
    ID              reduce using rule 45 (selection_stmt -> IF LPAREN expression RPAREN statement ELSE statement .)
    PLUSPLUS        reduce using rule 45 (selection_stmt -> IF LPAREN expression RPAREN statement ELSE statement .)
    MINUSMINUS      reduce using rule 45 (selection_stmt -> IF LPAREN expression RPAREN statement ELSE statement .)
    LBLOCK          reduce using rule 45 (selection_stmt -> IF LPAREN expression RPAREN statement ELSE statement .)
    IF              reduce using rule 45 (selection_stmt -> IF LPAREN expression RPAREN statement ELSE statement .)
    WHILE           reduce using rule 45 (selection_stmt -> IF LPAREN expression RPAREN statement ELSE statement .)
    FOR             reduce using rule 45 (selection_stmt -> IF LPAREN expression RPAREN statement ELSE statement .)
    RETURN          reduce using rule 45 (selection_stmt -> IF LPAREN expression RPAREN statement ELSE statement .)
    LPAREN          reduce using rule 45 (selection_stmt -> IF LPAREN expression RPAREN statement ELSE statement .)
    NUMBER          reduce using rule 45 (selection_stmt -> IF LPAREN expression RPAREN statement ELSE statement .)
    ELSE            reduce using rule 45 (selection_stmt -> IF LPAREN expression RPAREN statement ELSE statement .)


state 167

    (48) iteration_stmt -> FOR LPAREN var SEMICOLON expression SEMICOLON var . MINUSMINUS RPAREN statement
    (50) iteration_stmt -> FOR LPAREN var SEMICOLON expression SEMICOLON var . PLUSPLUS RPAREN statement
    (55) expression -> var . EQUAL expression
    (83) factor -> var .

    MINUSMINUS      shift and go to state 173
    PLUSPLUS        shift and go to state 174
    EQUAL           shift and go to state 62
    TIMES           reduce using rule 83 (factor -> var .)
    DIVIDE          reduce using rule 83 (factor -> var .)
    LESS_THAN       reduce using rule 83 (factor -> var .)
    LESS_OR_EQUAL   reduce using rule 83 (factor -> var .)
    GREATER_THAN    reduce using rule 83 (factor -> var .)
    GREATEREQUAL    reduce using rule 83 (factor -> var .)
    DEQUAL          reduce using rule 83 (factor -> var .)
    DISTINT         reduce using rule 83 (factor -> var .)
    QUOTES          reduce using rule 83 (factor -> var .)
    PLUS            reduce using rule 83 (factor -> var .)
    MINUS           reduce using rule 83 (factor -> var .)
    RPAREN          reduce using rule 83 (factor -> var .)


state 168

    (49) iteration_stmt -> FOR LPAREN var SEMICOLON expression SEMICOLON expression . RPAREN statement

    RPAREN          shift and go to state 175


state 169

    (52) iteration_stmt -> FOR LPAREN var SEMICOLON expression SEMICOLON MINUSMINUS . var RPAREN statement
    (63) var -> . ID
    (64) var -> . ID LBRACKET expression RBRACKET

    ID              shift and go to state 25

    var                            shift and go to state 176

state 170

    (51) iteration_stmt -> FOR LPAREN var SEMICOLON expression SEMICOLON PLUSPLUS . var RPAREN statement
    (63) var -> . ID
    (64) var -> . ID LBRACKET expression RBRACKET

    ID              shift and go to state 25

    var                            shift and go to state 177

state 171

    (31) expression_stmt -> COUT L_SHIFT QUOTES ID QUOTES L_SHIFT ENDL SEMICOLON .

    RBLOCK          reduce using rule 31 (expression_stmt -> COUT L_SHIFT QUOTES ID QUOTES L_SHIFT ENDL SEMICOLON .)
    SEMICOLON       reduce using rule 31 (expression_stmt -> COUT L_SHIFT QUOTES ID QUOTES L_SHIFT ENDL SEMICOLON .)
    COUT            reduce using rule 31 (expression_stmt -> COUT L_SHIFT QUOTES ID QUOTES L_SHIFT ENDL SEMICOLON .)
    CIN             reduce using rule 31 (expression_stmt -> COUT L_SHIFT QUOTES ID QUOTES L_SHIFT ENDL SEMICOLON .)
    ID              reduce using rule 31 (expression_stmt -> COUT L_SHIFT QUOTES ID QUOTES L_SHIFT ENDL SEMICOLON .)
    PLUSPLUS        reduce using rule 31 (expression_stmt -> COUT L_SHIFT QUOTES ID QUOTES L_SHIFT ENDL SEMICOLON .)
    MINUSMINUS      reduce using rule 31 (expression_stmt -> COUT L_SHIFT QUOTES ID QUOTES L_SHIFT ENDL SEMICOLON .)
    LBLOCK          reduce using rule 31 (expression_stmt -> COUT L_SHIFT QUOTES ID QUOTES L_SHIFT ENDL SEMICOLON .)
    IF              reduce using rule 31 (expression_stmt -> COUT L_SHIFT QUOTES ID QUOTES L_SHIFT ENDL SEMICOLON .)
    WHILE           reduce using rule 31 (expression_stmt -> COUT L_SHIFT QUOTES ID QUOTES L_SHIFT ENDL SEMICOLON .)
    FOR             reduce using rule 31 (expression_stmt -> COUT L_SHIFT QUOTES ID QUOTES L_SHIFT ENDL SEMICOLON .)
    RETURN          reduce using rule 31 (expression_stmt -> COUT L_SHIFT QUOTES ID QUOTES L_SHIFT ENDL SEMICOLON .)
    LPAREN          reduce using rule 31 (expression_stmt -> COUT L_SHIFT QUOTES ID QUOTES L_SHIFT ENDL SEMICOLON .)
    NUMBER          reduce using rule 31 (expression_stmt -> COUT L_SHIFT QUOTES ID QUOTES L_SHIFT ENDL SEMICOLON .)
    ELSE            reduce using rule 31 (expression_stmt -> COUT L_SHIFT QUOTES ID QUOTES L_SHIFT ENDL SEMICOLON .)


state 172

    (37) expression_stmt -> COUT L_SHIFT var L_SHIFT var L_SHIFT ENDL SEMICOLON .

    RBLOCK          reduce using rule 37 (expression_stmt -> COUT L_SHIFT var L_SHIFT var L_SHIFT ENDL SEMICOLON .)
    SEMICOLON       reduce using rule 37 (expression_stmt -> COUT L_SHIFT var L_SHIFT var L_SHIFT ENDL SEMICOLON .)
    COUT            reduce using rule 37 (expression_stmt -> COUT L_SHIFT var L_SHIFT var L_SHIFT ENDL SEMICOLON .)
    CIN             reduce using rule 37 (expression_stmt -> COUT L_SHIFT var L_SHIFT var L_SHIFT ENDL SEMICOLON .)
    ID              reduce using rule 37 (expression_stmt -> COUT L_SHIFT var L_SHIFT var L_SHIFT ENDL SEMICOLON .)
    PLUSPLUS        reduce using rule 37 (expression_stmt -> COUT L_SHIFT var L_SHIFT var L_SHIFT ENDL SEMICOLON .)
    MINUSMINUS      reduce using rule 37 (expression_stmt -> COUT L_SHIFT var L_SHIFT var L_SHIFT ENDL SEMICOLON .)
    LBLOCK          reduce using rule 37 (expression_stmt -> COUT L_SHIFT var L_SHIFT var L_SHIFT ENDL SEMICOLON .)
    IF              reduce using rule 37 (expression_stmt -> COUT L_SHIFT var L_SHIFT var L_SHIFT ENDL SEMICOLON .)
    WHILE           reduce using rule 37 (expression_stmt -> COUT L_SHIFT var L_SHIFT var L_SHIFT ENDL SEMICOLON .)
    FOR             reduce using rule 37 (expression_stmt -> COUT L_SHIFT var L_SHIFT var L_SHIFT ENDL SEMICOLON .)
    RETURN          reduce using rule 37 (expression_stmt -> COUT L_SHIFT var L_SHIFT var L_SHIFT ENDL SEMICOLON .)
    LPAREN          reduce using rule 37 (expression_stmt -> COUT L_SHIFT var L_SHIFT var L_SHIFT ENDL SEMICOLON .)
    NUMBER          reduce using rule 37 (expression_stmt -> COUT L_SHIFT var L_SHIFT var L_SHIFT ENDL SEMICOLON .)
    ELSE            reduce using rule 37 (expression_stmt -> COUT L_SHIFT var L_SHIFT var L_SHIFT ENDL SEMICOLON .)


state 173

    (48) iteration_stmt -> FOR LPAREN var SEMICOLON expression SEMICOLON var MINUSMINUS . RPAREN statement

    RPAREN          shift and go to state 178


state 174

    (50) iteration_stmt -> FOR LPAREN var SEMICOLON expression SEMICOLON var PLUSPLUS . RPAREN statement

    RPAREN          shift and go to state 179


state 175

    (49) iteration_stmt -> FOR LPAREN var SEMICOLON expression SEMICOLON expression RPAREN . statement
    (23) statement -> . expression_stmt
    (24) statement -> . compount_stmt
    (25) statement -> . selection_stmt
    (26) statement -> . iteration_stmt
    (27) statement -> . return_stmt
    (28) expression_stmt -> . expression SEMICOLON
    (29) expression_stmt -> . SEMICOLON
    (30) expression_stmt -> . COUT L_SHIFT QUOTES ID QUOTES SEMICOLON
    (31) expression_stmt -> . COUT L_SHIFT QUOTES ID QUOTES L_SHIFT ENDL SEMICOLON
    (32) expression_stmt -> . COUT L_SHIFT STRING SEMICOLON
    (33) expression_stmt -> . COUT L_SHIFT STRING L_SHIFT ENDL SEMICOLON
    (34) expression_stmt -> . COUT L_SHIFT var SEMICOLON
    (35) expression_stmt -> . COUT L_SHIFT var L_SHIFT ENDL SEMICOLON
    (36) expression_stmt -> . COUT L_SHIFT var L_SHIFT var SEMICOLON
    (37) expression_stmt -> . COUT L_SHIFT var L_SHIFT var L_SHIFT ENDL SEMICOLON
    (38) expression_stmt -> . CIN R_SHIFT var SEMICOLON
    (39) expression_stmt -> . CIN R_SHIFT var R_SHIFT var SEMICOLON
    (40) expression_stmt -> . ID PLUSPLUS
    (41) expression_stmt -> . PLUSPLUS ID
    (42) expression_stmt -> . ID MINUSMINUS
    (43) expression_stmt -> . MINUSMINUS ID
    (18) compount_stmt -> . LBLOCK local_declarations statement_list RBLOCK
    (44) selection_stmt -> . IF LPAREN expression RPAREN statement
    (45) selection_stmt -> . IF LPAREN expression RPAREN statement ELSE statement
    (46) iteration_stmt -> . WHILE LPAREN expression RPAREN statement
    (47) iteration_stmt -> .
    (48) iteration_stmt -> . FOR LPAREN var SEMICOLON expression SEMICOLON var MINUSMINUS RPAREN statement
    (49) iteration_stmt -> . FOR LPAREN var SEMICOLON expression SEMICOLON expression RPAREN statement
    (50) iteration_stmt -> . FOR LPAREN var SEMICOLON expression SEMICOLON var PLUSPLUS RPAREN statement
    (51) iteration_stmt -> . FOR LPAREN var SEMICOLON expression SEMICOLON PLUSPLUS var RPAREN statement
    (52) iteration_stmt -> . FOR LPAREN var SEMICOLON expression SEMICOLON MINUSMINUS var RPAREN statement
    (53) return_stmt -> . RETURN SEMICOLON
    (54) return_stmt -> . RETURN expression SEMICOLON
    (55) expression -> . var EQUAL expression
    (56) expression -> . simple_expression
    (63) var -> . ID
    (64) var -> . ID LBRACKET expression RBRACKET
    (65) simple_expression -> . additive_expression relop additive_expression
    (66) simple_expression -> . additive_expression
    (74) additive_expression -> . additive_expression addop term
    (75) additive_expression -> . term
    (78) term -> . term mulop factor
    (79) term -> . factor
    (82) factor -> . LPAREN expression RPAREN
    (83) factor -> . var
    (84) factor -> . call
    (85) factor -> . NUMBER
    (86) call -> . ID LPAREN args RPAREN

  ! shift/reduce conflict for SEMICOLON resolved as shift
  ! shift/reduce conflict for COUT resolved as shift
  ! shift/reduce conflict for CIN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for PLUSPLUS resolved as shift
  ! shift/reduce conflict for MINUSMINUS resolved as shift
  ! shift/reduce conflict for LBLOCK resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
    SEMICOLON       shift and go to state 105
    COUT            shift and go to state 106
    CIN             shift and go to state 108
    ID              shift and go to state 107
    PLUSPLUS        shift and go to state 109
    MINUSMINUS      shift and go to state 110
    LBLOCK          shift and go to state 58
    IF              shift and go to state 111
    WHILE           shift and go to state 112
    ELSE            reduce using rule 47 (iteration_stmt -> .)
    RBLOCK          reduce using rule 47 (iteration_stmt -> .)
    FOR             shift and go to state 113
    RETURN          shift and go to state 114
    LPAREN          shift and go to state 52
    NUMBER          shift and go to state 54

  ! SEMICOLON       [ reduce using rule 47 (iteration_stmt -> .) ]
  ! COUT            [ reduce using rule 47 (iteration_stmt -> .) ]
  ! CIN             [ reduce using rule 47 (iteration_stmt -> .) ]
  ! ID              [ reduce using rule 47 (iteration_stmt -> .) ]
  ! PLUSPLUS        [ reduce using rule 47 (iteration_stmt -> .) ]
  ! MINUSMINUS      [ reduce using rule 47 (iteration_stmt -> .) ]
  ! LBLOCK          [ reduce using rule 47 (iteration_stmt -> .) ]
  ! IF              [ reduce using rule 47 (iteration_stmt -> .) ]
  ! WHILE           [ reduce using rule 47 (iteration_stmt -> .) ]
  ! FOR             [ reduce using rule 47 (iteration_stmt -> .) ]
  ! RETURN          [ reduce using rule 47 (iteration_stmt -> .) ]
  ! LPAREN          [ reduce using rule 47 (iteration_stmt -> .) ]
  ! NUMBER          [ reduce using rule 47 (iteration_stmt -> .) ]

    var                            shift and go to state 47
    expression                     shift and go to state 104
    statement                      shift and go to state 180
    expression_stmt                shift and go to state 99
    compount_stmt                  shift and go to state 100
    selection_stmt                 shift and go to state 101
    iteration_stmt                 shift and go to state 102
    return_stmt                    shift and go to state 103
    simple_expression              shift and go to state 48
    additive_expression            shift and go to state 49
    term                           shift and go to state 50
    factor                         shift and go to state 51
    call                           shift and go to state 53

state 176

    (52) iteration_stmt -> FOR LPAREN var SEMICOLON expression SEMICOLON MINUSMINUS var . RPAREN statement

    RPAREN          shift and go to state 181


state 177

    (51) iteration_stmt -> FOR LPAREN var SEMICOLON expression SEMICOLON PLUSPLUS var . RPAREN statement

    RPAREN          shift and go to state 182


state 178

    (48) iteration_stmt -> FOR LPAREN var SEMICOLON expression SEMICOLON var MINUSMINUS RPAREN . statement
    (23) statement -> . expression_stmt
    (24) statement -> . compount_stmt
    (25) statement -> . selection_stmt
    (26) statement -> . iteration_stmt
    (27) statement -> . return_stmt
    (28) expression_stmt -> . expression SEMICOLON
    (29) expression_stmt -> . SEMICOLON
    (30) expression_stmt -> . COUT L_SHIFT QUOTES ID QUOTES SEMICOLON
    (31) expression_stmt -> . COUT L_SHIFT QUOTES ID QUOTES L_SHIFT ENDL SEMICOLON
    (32) expression_stmt -> . COUT L_SHIFT STRING SEMICOLON
    (33) expression_stmt -> . COUT L_SHIFT STRING L_SHIFT ENDL SEMICOLON
    (34) expression_stmt -> . COUT L_SHIFT var SEMICOLON
    (35) expression_stmt -> . COUT L_SHIFT var L_SHIFT ENDL SEMICOLON
    (36) expression_stmt -> . COUT L_SHIFT var L_SHIFT var SEMICOLON
    (37) expression_stmt -> . COUT L_SHIFT var L_SHIFT var L_SHIFT ENDL SEMICOLON
    (38) expression_stmt -> . CIN R_SHIFT var SEMICOLON
    (39) expression_stmt -> . CIN R_SHIFT var R_SHIFT var SEMICOLON
    (40) expression_stmt -> . ID PLUSPLUS
    (41) expression_stmt -> . PLUSPLUS ID
    (42) expression_stmt -> . ID MINUSMINUS
    (43) expression_stmt -> . MINUSMINUS ID
    (18) compount_stmt -> . LBLOCK local_declarations statement_list RBLOCK
    (44) selection_stmt -> . IF LPAREN expression RPAREN statement
    (45) selection_stmt -> . IF LPAREN expression RPAREN statement ELSE statement
    (46) iteration_stmt -> . WHILE LPAREN expression RPAREN statement
    (47) iteration_stmt -> .
    (48) iteration_stmt -> . FOR LPAREN var SEMICOLON expression SEMICOLON var MINUSMINUS RPAREN statement
    (49) iteration_stmt -> . FOR LPAREN var SEMICOLON expression SEMICOLON expression RPAREN statement
    (50) iteration_stmt -> . FOR LPAREN var SEMICOLON expression SEMICOLON var PLUSPLUS RPAREN statement
    (51) iteration_stmt -> . FOR LPAREN var SEMICOLON expression SEMICOLON PLUSPLUS var RPAREN statement
    (52) iteration_stmt -> . FOR LPAREN var SEMICOLON expression SEMICOLON MINUSMINUS var RPAREN statement
    (53) return_stmt -> . RETURN SEMICOLON
    (54) return_stmt -> . RETURN expression SEMICOLON
    (55) expression -> . var EQUAL expression
    (56) expression -> . simple_expression
    (63) var -> . ID
    (64) var -> . ID LBRACKET expression RBRACKET
    (65) simple_expression -> . additive_expression relop additive_expression
    (66) simple_expression -> . additive_expression
    (74) additive_expression -> . additive_expression addop term
    (75) additive_expression -> . term
    (78) term -> . term mulop factor
    (79) term -> . factor
    (82) factor -> . LPAREN expression RPAREN
    (83) factor -> . var
    (84) factor -> . call
    (85) factor -> . NUMBER
    (86) call -> . ID LPAREN args RPAREN

  ! shift/reduce conflict for SEMICOLON resolved as shift
  ! shift/reduce conflict for COUT resolved as shift
  ! shift/reduce conflict for CIN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for PLUSPLUS resolved as shift
  ! shift/reduce conflict for MINUSMINUS resolved as shift
  ! shift/reduce conflict for LBLOCK resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
    SEMICOLON       shift and go to state 105
    COUT            shift and go to state 106
    CIN             shift and go to state 108
    ID              shift and go to state 107
    PLUSPLUS        shift and go to state 109
    MINUSMINUS      shift and go to state 110
    LBLOCK          shift and go to state 58
    IF              shift and go to state 111
    WHILE           shift and go to state 112
    ELSE            reduce using rule 47 (iteration_stmt -> .)
    RBLOCK          reduce using rule 47 (iteration_stmt -> .)
    FOR             shift and go to state 113
    RETURN          shift and go to state 114
    LPAREN          shift and go to state 52
    NUMBER          shift and go to state 54

  ! SEMICOLON       [ reduce using rule 47 (iteration_stmt -> .) ]
  ! COUT            [ reduce using rule 47 (iteration_stmt -> .) ]
  ! CIN             [ reduce using rule 47 (iteration_stmt -> .) ]
  ! ID              [ reduce using rule 47 (iteration_stmt -> .) ]
  ! PLUSPLUS        [ reduce using rule 47 (iteration_stmt -> .) ]
  ! MINUSMINUS      [ reduce using rule 47 (iteration_stmt -> .) ]
  ! LBLOCK          [ reduce using rule 47 (iteration_stmt -> .) ]
  ! IF              [ reduce using rule 47 (iteration_stmt -> .) ]
  ! WHILE           [ reduce using rule 47 (iteration_stmt -> .) ]
  ! FOR             [ reduce using rule 47 (iteration_stmt -> .) ]
  ! RETURN          [ reduce using rule 47 (iteration_stmt -> .) ]
  ! LPAREN          [ reduce using rule 47 (iteration_stmt -> .) ]
  ! NUMBER          [ reduce using rule 47 (iteration_stmt -> .) ]

    var                            shift and go to state 47
    expression                     shift and go to state 104
    statement                      shift and go to state 183
    expression_stmt                shift and go to state 99
    compount_stmt                  shift and go to state 100
    selection_stmt                 shift and go to state 101
    iteration_stmt                 shift and go to state 102
    return_stmt                    shift and go to state 103
    simple_expression              shift and go to state 48
    additive_expression            shift and go to state 49
    term                           shift and go to state 50
    factor                         shift and go to state 51
    call                           shift and go to state 53

state 179

    (50) iteration_stmt -> FOR LPAREN var SEMICOLON expression SEMICOLON var PLUSPLUS RPAREN . statement
    (23) statement -> . expression_stmt
    (24) statement -> . compount_stmt
    (25) statement -> . selection_stmt
    (26) statement -> . iteration_stmt
    (27) statement -> . return_stmt
    (28) expression_stmt -> . expression SEMICOLON
    (29) expression_stmt -> . SEMICOLON
    (30) expression_stmt -> . COUT L_SHIFT QUOTES ID QUOTES SEMICOLON
    (31) expression_stmt -> . COUT L_SHIFT QUOTES ID QUOTES L_SHIFT ENDL SEMICOLON
    (32) expression_stmt -> . COUT L_SHIFT STRING SEMICOLON
    (33) expression_stmt -> . COUT L_SHIFT STRING L_SHIFT ENDL SEMICOLON
    (34) expression_stmt -> . COUT L_SHIFT var SEMICOLON
    (35) expression_stmt -> . COUT L_SHIFT var L_SHIFT ENDL SEMICOLON
    (36) expression_stmt -> . COUT L_SHIFT var L_SHIFT var SEMICOLON
    (37) expression_stmt -> . COUT L_SHIFT var L_SHIFT var L_SHIFT ENDL SEMICOLON
    (38) expression_stmt -> . CIN R_SHIFT var SEMICOLON
    (39) expression_stmt -> . CIN R_SHIFT var R_SHIFT var SEMICOLON
    (40) expression_stmt -> . ID PLUSPLUS
    (41) expression_stmt -> . PLUSPLUS ID
    (42) expression_stmt -> . ID MINUSMINUS
    (43) expression_stmt -> . MINUSMINUS ID
    (18) compount_stmt -> . LBLOCK local_declarations statement_list RBLOCK
    (44) selection_stmt -> . IF LPAREN expression RPAREN statement
    (45) selection_stmt -> . IF LPAREN expression RPAREN statement ELSE statement
    (46) iteration_stmt -> . WHILE LPAREN expression RPAREN statement
    (47) iteration_stmt -> .
    (48) iteration_stmt -> . FOR LPAREN var SEMICOLON expression SEMICOLON var MINUSMINUS RPAREN statement
    (49) iteration_stmt -> . FOR LPAREN var SEMICOLON expression SEMICOLON expression RPAREN statement
    (50) iteration_stmt -> . FOR LPAREN var SEMICOLON expression SEMICOLON var PLUSPLUS RPAREN statement
    (51) iteration_stmt -> . FOR LPAREN var SEMICOLON expression SEMICOLON PLUSPLUS var RPAREN statement
    (52) iteration_stmt -> . FOR LPAREN var SEMICOLON expression SEMICOLON MINUSMINUS var RPAREN statement
    (53) return_stmt -> . RETURN SEMICOLON
    (54) return_stmt -> . RETURN expression SEMICOLON
    (55) expression -> . var EQUAL expression
    (56) expression -> . simple_expression
    (63) var -> . ID
    (64) var -> . ID LBRACKET expression RBRACKET
    (65) simple_expression -> . additive_expression relop additive_expression
    (66) simple_expression -> . additive_expression
    (74) additive_expression -> . additive_expression addop term
    (75) additive_expression -> . term
    (78) term -> . term mulop factor
    (79) term -> . factor
    (82) factor -> . LPAREN expression RPAREN
    (83) factor -> . var
    (84) factor -> . call
    (85) factor -> . NUMBER
    (86) call -> . ID LPAREN args RPAREN

  ! shift/reduce conflict for SEMICOLON resolved as shift
  ! shift/reduce conflict for COUT resolved as shift
  ! shift/reduce conflict for CIN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for PLUSPLUS resolved as shift
  ! shift/reduce conflict for MINUSMINUS resolved as shift
  ! shift/reduce conflict for LBLOCK resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
    SEMICOLON       shift and go to state 105
    COUT            shift and go to state 106
    CIN             shift and go to state 108
    ID              shift and go to state 107
    PLUSPLUS        shift and go to state 109
    MINUSMINUS      shift and go to state 110
    LBLOCK          shift and go to state 58
    IF              shift and go to state 111
    WHILE           shift and go to state 112
    ELSE            reduce using rule 47 (iteration_stmt -> .)
    RBLOCK          reduce using rule 47 (iteration_stmt -> .)
    FOR             shift and go to state 113
    RETURN          shift and go to state 114
    LPAREN          shift and go to state 52
    NUMBER          shift and go to state 54

  ! SEMICOLON       [ reduce using rule 47 (iteration_stmt -> .) ]
  ! COUT            [ reduce using rule 47 (iteration_stmt -> .) ]
  ! CIN             [ reduce using rule 47 (iteration_stmt -> .) ]
  ! ID              [ reduce using rule 47 (iteration_stmt -> .) ]
  ! PLUSPLUS        [ reduce using rule 47 (iteration_stmt -> .) ]
  ! MINUSMINUS      [ reduce using rule 47 (iteration_stmt -> .) ]
  ! LBLOCK          [ reduce using rule 47 (iteration_stmt -> .) ]
  ! IF              [ reduce using rule 47 (iteration_stmt -> .) ]
  ! WHILE           [ reduce using rule 47 (iteration_stmt -> .) ]
  ! FOR             [ reduce using rule 47 (iteration_stmt -> .) ]
  ! RETURN          [ reduce using rule 47 (iteration_stmt -> .) ]
  ! LPAREN          [ reduce using rule 47 (iteration_stmt -> .) ]
  ! NUMBER          [ reduce using rule 47 (iteration_stmt -> .) ]

    var                            shift and go to state 47
    expression                     shift and go to state 104
    statement                      shift and go to state 184
    expression_stmt                shift and go to state 99
    compount_stmt                  shift and go to state 100
    selection_stmt                 shift and go to state 101
    iteration_stmt                 shift and go to state 102
    return_stmt                    shift and go to state 103
    simple_expression              shift and go to state 48
    additive_expression            shift and go to state 49
    term                           shift and go to state 50
    factor                         shift and go to state 51
    call                           shift and go to state 53

state 180

    (49) iteration_stmt -> FOR LPAREN var SEMICOLON expression SEMICOLON expression RPAREN statement .

    RBLOCK          reduce using rule 49 (iteration_stmt -> FOR LPAREN var SEMICOLON expression SEMICOLON expression RPAREN statement .)
    SEMICOLON       reduce using rule 49 (iteration_stmt -> FOR LPAREN var SEMICOLON expression SEMICOLON expression RPAREN statement .)
    COUT            reduce using rule 49 (iteration_stmt -> FOR LPAREN var SEMICOLON expression SEMICOLON expression RPAREN statement .)
    CIN             reduce using rule 49 (iteration_stmt -> FOR LPAREN var SEMICOLON expression SEMICOLON expression RPAREN statement .)
    ID              reduce using rule 49 (iteration_stmt -> FOR LPAREN var SEMICOLON expression SEMICOLON expression RPAREN statement .)
    PLUSPLUS        reduce using rule 49 (iteration_stmt -> FOR LPAREN var SEMICOLON expression SEMICOLON expression RPAREN statement .)
    MINUSMINUS      reduce using rule 49 (iteration_stmt -> FOR LPAREN var SEMICOLON expression SEMICOLON expression RPAREN statement .)
    LBLOCK          reduce using rule 49 (iteration_stmt -> FOR LPAREN var SEMICOLON expression SEMICOLON expression RPAREN statement .)
    IF              reduce using rule 49 (iteration_stmt -> FOR LPAREN var SEMICOLON expression SEMICOLON expression RPAREN statement .)
    WHILE           reduce using rule 49 (iteration_stmt -> FOR LPAREN var SEMICOLON expression SEMICOLON expression RPAREN statement .)
    FOR             reduce using rule 49 (iteration_stmt -> FOR LPAREN var SEMICOLON expression SEMICOLON expression RPAREN statement .)
    RETURN          reduce using rule 49 (iteration_stmt -> FOR LPAREN var SEMICOLON expression SEMICOLON expression RPAREN statement .)
    LPAREN          reduce using rule 49 (iteration_stmt -> FOR LPAREN var SEMICOLON expression SEMICOLON expression RPAREN statement .)
    NUMBER          reduce using rule 49 (iteration_stmt -> FOR LPAREN var SEMICOLON expression SEMICOLON expression RPAREN statement .)
    ELSE            reduce using rule 49 (iteration_stmt -> FOR LPAREN var SEMICOLON expression SEMICOLON expression RPAREN statement .)


state 181

    (52) iteration_stmt -> FOR LPAREN var SEMICOLON expression SEMICOLON MINUSMINUS var RPAREN . statement
    (23) statement -> . expression_stmt
    (24) statement -> . compount_stmt
    (25) statement -> . selection_stmt
    (26) statement -> . iteration_stmt
    (27) statement -> . return_stmt
    (28) expression_stmt -> . expression SEMICOLON
    (29) expression_stmt -> . SEMICOLON
    (30) expression_stmt -> . COUT L_SHIFT QUOTES ID QUOTES SEMICOLON
    (31) expression_stmt -> . COUT L_SHIFT QUOTES ID QUOTES L_SHIFT ENDL SEMICOLON
    (32) expression_stmt -> . COUT L_SHIFT STRING SEMICOLON
    (33) expression_stmt -> . COUT L_SHIFT STRING L_SHIFT ENDL SEMICOLON
    (34) expression_stmt -> . COUT L_SHIFT var SEMICOLON
    (35) expression_stmt -> . COUT L_SHIFT var L_SHIFT ENDL SEMICOLON
    (36) expression_stmt -> . COUT L_SHIFT var L_SHIFT var SEMICOLON
    (37) expression_stmt -> . COUT L_SHIFT var L_SHIFT var L_SHIFT ENDL SEMICOLON
    (38) expression_stmt -> . CIN R_SHIFT var SEMICOLON
    (39) expression_stmt -> . CIN R_SHIFT var R_SHIFT var SEMICOLON
    (40) expression_stmt -> . ID PLUSPLUS
    (41) expression_stmt -> . PLUSPLUS ID
    (42) expression_stmt -> . ID MINUSMINUS
    (43) expression_stmt -> . MINUSMINUS ID
    (18) compount_stmt -> . LBLOCK local_declarations statement_list RBLOCK
    (44) selection_stmt -> . IF LPAREN expression RPAREN statement
    (45) selection_stmt -> . IF LPAREN expression RPAREN statement ELSE statement
    (46) iteration_stmt -> . WHILE LPAREN expression RPAREN statement
    (47) iteration_stmt -> .
    (48) iteration_stmt -> . FOR LPAREN var SEMICOLON expression SEMICOLON var MINUSMINUS RPAREN statement
    (49) iteration_stmt -> . FOR LPAREN var SEMICOLON expression SEMICOLON expression RPAREN statement
    (50) iteration_stmt -> . FOR LPAREN var SEMICOLON expression SEMICOLON var PLUSPLUS RPAREN statement
    (51) iteration_stmt -> . FOR LPAREN var SEMICOLON expression SEMICOLON PLUSPLUS var RPAREN statement
    (52) iteration_stmt -> . FOR LPAREN var SEMICOLON expression SEMICOLON MINUSMINUS var RPAREN statement
    (53) return_stmt -> . RETURN SEMICOLON
    (54) return_stmt -> . RETURN expression SEMICOLON
    (55) expression -> . var EQUAL expression
    (56) expression -> . simple_expression
    (63) var -> . ID
    (64) var -> . ID LBRACKET expression RBRACKET
    (65) simple_expression -> . additive_expression relop additive_expression
    (66) simple_expression -> . additive_expression
    (74) additive_expression -> . additive_expression addop term
    (75) additive_expression -> . term
    (78) term -> . term mulop factor
    (79) term -> . factor
    (82) factor -> . LPAREN expression RPAREN
    (83) factor -> . var
    (84) factor -> . call
    (85) factor -> . NUMBER
    (86) call -> . ID LPAREN args RPAREN

  ! shift/reduce conflict for SEMICOLON resolved as shift
  ! shift/reduce conflict for COUT resolved as shift
  ! shift/reduce conflict for CIN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for PLUSPLUS resolved as shift
  ! shift/reduce conflict for MINUSMINUS resolved as shift
  ! shift/reduce conflict for LBLOCK resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
    SEMICOLON       shift and go to state 105
    COUT            shift and go to state 106
    CIN             shift and go to state 108
    ID              shift and go to state 107
    PLUSPLUS        shift and go to state 109
    MINUSMINUS      shift and go to state 110
    LBLOCK          shift and go to state 58
    IF              shift and go to state 111
    WHILE           shift and go to state 112
    ELSE            reduce using rule 47 (iteration_stmt -> .)
    RBLOCK          reduce using rule 47 (iteration_stmt -> .)
    FOR             shift and go to state 113
    RETURN          shift and go to state 114
    LPAREN          shift and go to state 52
    NUMBER          shift and go to state 54

  ! SEMICOLON       [ reduce using rule 47 (iteration_stmt -> .) ]
  ! COUT            [ reduce using rule 47 (iteration_stmt -> .) ]
  ! CIN             [ reduce using rule 47 (iteration_stmt -> .) ]
  ! ID              [ reduce using rule 47 (iteration_stmt -> .) ]
  ! PLUSPLUS        [ reduce using rule 47 (iteration_stmt -> .) ]
  ! MINUSMINUS      [ reduce using rule 47 (iteration_stmt -> .) ]
  ! LBLOCK          [ reduce using rule 47 (iteration_stmt -> .) ]
  ! IF              [ reduce using rule 47 (iteration_stmt -> .) ]
  ! WHILE           [ reduce using rule 47 (iteration_stmt -> .) ]
  ! FOR             [ reduce using rule 47 (iteration_stmt -> .) ]
  ! RETURN          [ reduce using rule 47 (iteration_stmt -> .) ]
  ! LPAREN          [ reduce using rule 47 (iteration_stmt -> .) ]
  ! NUMBER          [ reduce using rule 47 (iteration_stmt -> .) ]

    var                            shift and go to state 47
    expression                     shift and go to state 104
    statement                      shift and go to state 185
    expression_stmt                shift and go to state 99
    compount_stmt                  shift and go to state 100
    selection_stmt                 shift and go to state 101
    iteration_stmt                 shift and go to state 102
    return_stmt                    shift and go to state 103
    simple_expression              shift and go to state 48
    additive_expression            shift and go to state 49
    term                           shift and go to state 50
    factor                         shift and go to state 51
    call                           shift and go to state 53

state 182

    (51) iteration_stmt -> FOR LPAREN var SEMICOLON expression SEMICOLON PLUSPLUS var RPAREN . statement
    (23) statement -> . expression_stmt
    (24) statement -> . compount_stmt
    (25) statement -> . selection_stmt
    (26) statement -> . iteration_stmt
    (27) statement -> . return_stmt
    (28) expression_stmt -> . expression SEMICOLON
    (29) expression_stmt -> . SEMICOLON
    (30) expression_stmt -> . COUT L_SHIFT QUOTES ID QUOTES SEMICOLON
    (31) expression_stmt -> . COUT L_SHIFT QUOTES ID QUOTES L_SHIFT ENDL SEMICOLON
    (32) expression_stmt -> . COUT L_SHIFT STRING SEMICOLON
    (33) expression_stmt -> . COUT L_SHIFT STRING L_SHIFT ENDL SEMICOLON
    (34) expression_stmt -> . COUT L_SHIFT var SEMICOLON
    (35) expression_stmt -> . COUT L_SHIFT var L_SHIFT ENDL SEMICOLON
    (36) expression_stmt -> . COUT L_SHIFT var L_SHIFT var SEMICOLON
    (37) expression_stmt -> . COUT L_SHIFT var L_SHIFT var L_SHIFT ENDL SEMICOLON
    (38) expression_stmt -> . CIN R_SHIFT var SEMICOLON
    (39) expression_stmt -> . CIN R_SHIFT var R_SHIFT var SEMICOLON
    (40) expression_stmt -> . ID PLUSPLUS
    (41) expression_stmt -> . PLUSPLUS ID
    (42) expression_stmt -> . ID MINUSMINUS
    (43) expression_stmt -> . MINUSMINUS ID
    (18) compount_stmt -> . LBLOCK local_declarations statement_list RBLOCK
    (44) selection_stmt -> . IF LPAREN expression RPAREN statement
    (45) selection_stmt -> . IF LPAREN expression RPAREN statement ELSE statement
    (46) iteration_stmt -> . WHILE LPAREN expression RPAREN statement
    (47) iteration_stmt -> .
    (48) iteration_stmt -> . FOR LPAREN var SEMICOLON expression SEMICOLON var MINUSMINUS RPAREN statement
    (49) iteration_stmt -> . FOR LPAREN var SEMICOLON expression SEMICOLON expression RPAREN statement
    (50) iteration_stmt -> . FOR LPAREN var SEMICOLON expression SEMICOLON var PLUSPLUS RPAREN statement
    (51) iteration_stmt -> . FOR LPAREN var SEMICOLON expression SEMICOLON PLUSPLUS var RPAREN statement
    (52) iteration_stmt -> . FOR LPAREN var SEMICOLON expression SEMICOLON MINUSMINUS var RPAREN statement
    (53) return_stmt -> . RETURN SEMICOLON
    (54) return_stmt -> . RETURN expression SEMICOLON
    (55) expression -> . var EQUAL expression
    (56) expression -> . simple_expression
    (63) var -> . ID
    (64) var -> . ID LBRACKET expression RBRACKET
    (65) simple_expression -> . additive_expression relop additive_expression
    (66) simple_expression -> . additive_expression
    (74) additive_expression -> . additive_expression addop term
    (75) additive_expression -> . term
    (78) term -> . term mulop factor
    (79) term -> . factor
    (82) factor -> . LPAREN expression RPAREN
    (83) factor -> . var
    (84) factor -> . call
    (85) factor -> . NUMBER
    (86) call -> . ID LPAREN args RPAREN

  ! shift/reduce conflict for SEMICOLON resolved as shift
  ! shift/reduce conflict for COUT resolved as shift
  ! shift/reduce conflict for CIN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for PLUSPLUS resolved as shift
  ! shift/reduce conflict for MINUSMINUS resolved as shift
  ! shift/reduce conflict for LBLOCK resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
    SEMICOLON       shift and go to state 105
    COUT            shift and go to state 106
    CIN             shift and go to state 108
    ID              shift and go to state 107
    PLUSPLUS        shift and go to state 109
    MINUSMINUS      shift and go to state 110
    LBLOCK          shift and go to state 58
    IF              shift and go to state 111
    WHILE           shift and go to state 112
    ELSE            reduce using rule 47 (iteration_stmt -> .)
    RBLOCK          reduce using rule 47 (iteration_stmt -> .)
    FOR             shift and go to state 113
    RETURN          shift and go to state 114
    LPAREN          shift and go to state 52
    NUMBER          shift and go to state 54

  ! SEMICOLON       [ reduce using rule 47 (iteration_stmt -> .) ]
  ! COUT            [ reduce using rule 47 (iteration_stmt -> .) ]
  ! CIN             [ reduce using rule 47 (iteration_stmt -> .) ]
  ! ID              [ reduce using rule 47 (iteration_stmt -> .) ]
  ! PLUSPLUS        [ reduce using rule 47 (iteration_stmt -> .) ]
  ! MINUSMINUS      [ reduce using rule 47 (iteration_stmt -> .) ]
  ! LBLOCK          [ reduce using rule 47 (iteration_stmt -> .) ]
  ! IF              [ reduce using rule 47 (iteration_stmt -> .) ]
  ! WHILE           [ reduce using rule 47 (iteration_stmt -> .) ]
  ! FOR             [ reduce using rule 47 (iteration_stmt -> .) ]
  ! RETURN          [ reduce using rule 47 (iteration_stmt -> .) ]
  ! LPAREN          [ reduce using rule 47 (iteration_stmt -> .) ]
  ! NUMBER          [ reduce using rule 47 (iteration_stmt -> .) ]

    var                            shift and go to state 47
    expression                     shift and go to state 104
    statement                      shift and go to state 186
    expression_stmt                shift and go to state 99
    compount_stmt                  shift and go to state 100
    selection_stmt                 shift and go to state 101
    iteration_stmt                 shift and go to state 102
    return_stmt                    shift and go to state 103
    simple_expression              shift and go to state 48
    additive_expression            shift and go to state 49
    term                           shift and go to state 50
    factor                         shift and go to state 51
    call                           shift and go to state 53

state 183

    (48) iteration_stmt -> FOR LPAREN var SEMICOLON expression SEMICOLON var MINUSMINUS RPAREN statement .

    RBLOCK          reduce using rule 48 (iteration_stmt -> FOR LPAREN var SEMICOLON expression SEMICOLON var MINUSMINUS RPAREN statement .)
    SEMICOLON       reduce using rule 48 (iteration_stmt -> FOR LPAREN var SEMICOLON expression SEMICOLON var MINUSMINUS RPAREN statement .)
    COUT            reduce using rule 48 (iteration_stmt -> FOR LPAREN var SEMICOLON expression SEMICOLON var MINUSMINUS RPAREN statement .)
    CIN             reduce using rule 48 (iteration_stmt -> FOR LPAREN var SEMICOLON expression SEMICOLON var MINUSMINUS RPAREN statement .)
    ID              reduce using rule 48 (iteration_stmt -> FOR LPAREN var SEMICOLON expression SEMICOLON var MINUSMINUS RPAREN statement .)
    PLUSPLUS        reduce using rule 48 (iteration_stmt -> FOR LPAREN var SEMICOLON expression SEMICOLON var MINUSMINUS RPAREN statement .)
    MINUSMINUS      reduce using rule 48 (iteration_stmt -> FOR LPAREN var SEMICOLON expression SEMICOLON var MINUSMINUS RPAREN statement .)
    LBLOCK          reduce using rule 48 (iteration_stmt -> FOR LPAREN var SEMICOLON expression SEMICOLON var MINUSMINUS RPAREN statement .)
    IF              reduce using rule 48 (iteration_stmt -> FOR LPAREN var SEMICOLON expression SEMICOLON var MINUSMINUS RPAREN statement .)
    WHILE           reduce using rule 48 (iteration_stmt -> FOR LPAREN var SEMICOLON expression SEMICOLON var MINUSMINUS RPAREN statement .)
    FOR             reduce using rule 48 (iteration_stmt -> FOR LPAREN var SEMICOLON expression SEMICOLON var MINUSMINUS RPAREN statement .)
    RETURN          reduce using rule 48 (iteration_stmt -> FOR LPAREN var SEMICOLON expression SEMICOLON var MINUSMINUS RPAREN statement .)
    LPAREN          reduce using rule 48 (iteration_stmt -> FOR LPAREN var SEMICOLON expression SEMICOLON var MINUSMINUS RPAREN statement .)
    NUMBER          reduce using rule 48 (iteration_stmt -> FOR LPAREN var SEMICOLON expression SEMICOLON var MINUSMINUS RPAREN statement .)
    ELSE            reduce using rule 48 (iteration_stmt -> FOR LPAREN var SEMICOLON expression SEMICOLON var MINUSMINUS RPAREN statement .)


state 184

    (50) iteration_stmt -> FOR LPAREN var SEMICOLON expression SEMICOLON var PLUSPLUS RPAREN statement .

    RBLOCK          reduce using rule 50 (iteration_stmt -> FOR LPAREN var SEMICOLON expression SEMICOLON var PLUSPLUS RPAREN statement .)
    SEMICOLON       reduce using rule 50 (iteration_stmt -> FOR LPAREN var SEMICOLON expression SEMICOLON var PLUSPLUS RPAREN statement .)
    COUT            reduce using rule 50 (iteration_stmt -> FOR LPAREN var SEMICOLON expression SEMICOLON var PLUSPLUS RPAREN statement .)
    CIN             reduce using rule 50 (iteration_stmt -> FOR LPAREN var SEMICOLON expression SEMICOLON var PLUSPLUS RPAREN statement .)
    ID              reduce using rule 50 (iteration_stmt -> FOR LPAREN var SEMICOLON expression SEMICOLON var PLUSPLUS RPAREN statement .)
    PLUSPLUS        reduce using rule 50 (iteration_stmt -> FOR LPAREN var SEMICOLON expression SEMICOLON var PLUSPLUS RPAREN statement .)
    MINUSMINUS      reduce using rule 50 (iteration_stmt -> FOR LPAREN var SEMICOLON expression SEMICOLON var PLUSPLUS RPAREN statement .)
    LBLOCK          reduce using rule 50 (iteration_stmt -> FOR LPAREN var SEMICOLON expression SEMICOLON var PLUSPLUS RPAREN statement .)
    IF              reduce using rule 50 (iteration_stmt -> FOR LPAREN var SEMICOLON expression SEMICOLON var PLUSPLUS RPAREN statement .)
    WHILE           reduce using rule 50 (iteration_stmt -> FOR LPAREN var SEMICOLON expression SEMICOLON var PLUSPLUS RPAREN statement .)
    FOR             reduce using rule 50 (iteration_stmt -> FOR LPAREN var SEMICOLON expression SEMICOLON var PLUSPLUS RPAREN statement .)
    RETURN          reduce using rule 50 (iteration_stmt -> FOR LPAREN var SEMICOLON expression SEMICOLON var PLUSPLUS RPAREN statement .)
    LPAREN          reduce using rule 50 (iteration_stmt -> FOR LPAREN var SEMICOLON expression SEMICOLON var PLUSPLUS RPAREN statement .)
    NUMBER          reduce using rule 50 (iteration_stmt -> FOR LPAREN var SEMICOLON expression SEMICOLON var PLUSPLUS RPAREN statement .)
    ELSE            reduce using rule 50 (iteration_stmt -> FOR LPAREN var SEMICOLON expression SEMICOLON var PLUSPLUS RPAREN statement .)


state 185

    (52) iteration_stmt -> FOR LPAREN var SEMICOLON expression SEMICOLON MINUSMINUS var RPAREN statement .

    RBLOCK          reduce using rule 52 (iteration_stmt -> FOR LPAREN var SEMICOLON expression SEMICOLON MINUSMINUS var RPAREN statement .)
    SEMICOLON       reduce using rule 52 (iteration_stmt -> FOR LPAREN var SEMICOLON expression SEMICOLON MINUSMINUS var RPAREN statement .)
    COUT            reduce using rule 52 (iteration_stmt -> FOR LPAREN var SEMICOLON expression SEMICOLON MINUSMINUS var RPAREN statement .)
    CIN             reduce using rule 52 (iteration_stmt -> FOR LPAREN var SEMICOLON expression SEMICOLON MINUSMINUS var RPAREN statement .)
    ID              reduce using rule 52 (iteration_stmt -> FOR LPAREN var SEMICOLON expression SEMICOLON MINUSMINUS var RPAREN statement .)
    PLUSPLUS        reduce using rule 52 (iteration_stmt -> FOR LPAREN var SEMICOLON expression SEMICOLON MINUSMINUS var RPAREN statement .)
    MINUSMINUS      reduce using rule 52 (iteration_stmt -> FOR LPAREN var SEMICOLON expression SEMICOLON MINUSMINUS var RPAREN statement .)
    LBLOCK          reduce using rule 52 (iteration_stmt -> FOR LPAREN var SEMICOLON expression SEMICOLON MINUSMINUS var RPAREN statement .)
    IF              reduce using rule 52 (iteration_stmt -> FOR LPAREN var SEMICOLON expression SEMICOLON MINUSMINUS var RPAREN statement .)
    WHILE           reduce using rule 52 (iteration_stmt -> FOR LPAREN var SEMICOLON expression SEMICOLON MINUSMINUS var RPAREN statement .)
    FOR             reduce using rule 52 (iteration_stmt -> FOR LPAREN var SEMICOLON expression SEMICOLON MINUSMINUS var RPAREN statement .)
    RETURN          reduce using rule 52 (iteration_stmt -> FOR LPAREN var SEMICOLON expression SEMICOLON MINUSMINUS var RPAREN statement .)
    LPAREN          reduce using rule 52 (iteration_stmt -> FOR LPAREN var SEMICOLON expression SEMICOLON MINUSMINUS var RPAREN statement .)
    NUMBER          reduce using rule 52 (iteration_stmt -> FOR LPAREN var SEMICOLON expression SEMICOLON MINUSMINUS var RPAREN statement .)
    ELSE            reduce using rule 52 (iteration_stmt -> FOR LPAREN var SEMICOLON expression SEMICOLON MINUSMINUS var RPAREN statement .)


state 186

    (51) iteration_stmt -> FOR LPAREN var SEMICOLON expression SEMICOLON PLUSPLUS var RPAREN statement .

    RBLOCK          reduce using rule 51 (iteration_stmt -> FOR LPAREN var SEMICOLON expression SEMICOLON PLUSPLUS var RPAREN statement .)
    SEMICOLON       reduce using rule 51 (iteration_stmt -> FOR LPAREN var SEMICOLON expression SEMICOLON PLUSPLUS var RPAREN statement .)
    COUT            reduce using rule 51 (iteration_stmt -> FOR LPAREN var SEMICOLON expression SEMICOLON PLUSPLUS var RPAREN statement .)
    CIN             reduce using rule 51 (iteration_stmt -> FOR LPAREN var SEMICOLON expression SEMICOLON PLUSPLUS var RPAREN statement .)
    ID              reduce using rule 51 (iteration_stmt -> FOR LPAREN var SEMICOLON expression SEMICOLON PLUSPLUS var RPAREN statement .)
    PLUSPLUS        reduce using rule 51 (iteration_stmt -> FOR LPAREN var SEMICOLON expression SEMICOLON PLUSPLUS var RPAREN statement .)
    MINUSMINUS      reduce using rule 51 (iteration_stmt -> FOR LPAREN var SEMICOLON expression SEMICOLON PLUSPLUS var RPAREN statement .)
    LBLOCK          reduce using rule 51 (iteration_stmt -> FOR LPAREN var SEMICOLON expression SEMICOLON PLUSPLUS var RPAREN statement .)
    IF              reduce using rule 51 (iteration_stmt -> FOR LPAREN var SEMICOLON expression SEMICOLON PLUSPLUS var RPAREN statement .)
    WHILE           reduce using rule 51 (iteration_stmt -> FOR LPAREN var SEMICOLON expression SEMICOLON PLUSPLUS var RPAREN statement .)
    FOR             reduce using rule 51 (iteration_stmt -> FOR LPAREN var SEMICOLON expression SEMICOLON PLUSPLUS var RPAREN statement .)
    RETURN          reduce using rule 51 (iteration_stmt -> FOR LPAREN var SEMICOLON expression SEMICOLON PLUSPLUS var RPAREN statement .)
    LPAREN          reduce using rule 51 (iteration_stmt -> FOR LPAREN var SEMICOLON expression SEMICOLON PLUSPLUS var RPAREN statement .)
    NUMBER          reduce using rule 51 (iteration_stmt -> FOR LPAREN var SEMICOLON expression SEMICOLON PLUSPLUS var RPAREN statement .)
    ELSE            reduce using rule 51 (iteration_stmt -> FOR LPAREN var SEMICOLON expression SEMICOLON PLUSPLUS var RPAREN statement .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for RBLOCK in state 91 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 91 resolved as shift
WARNING: shift/reduce conflict for COUT in state 91 resolved as shift
WARNING: shift/reduce conflict for CIN in state 91 resolved as shift
WARNING: shift/reduce conflict for ID in state 91 resolved as shift
WARNING: shift/reduce conflict for PLUSPLUS in state 91 resolved as shift
WARNING: shift/reduce conflict for MINUSMINUS in state 91 resolved as shift
WARNING: shift/reduce conflict for LBLOCK in state 91 resolved as shift
WARNING: shift/reduce conflict for IF in state 91 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 91 resolved as shift
WARNING: shift/reduce conflict for FOR in state 91 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 91 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 91 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 91 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 144 resolved as shift
WARNING: shift/reduce conflict for COUT in state 144 resolved as shift
WARNING: shift/reduce conflict for CIN in state 144 resolved as shift
WARNING: shift/reduce conflict for ID in state 144 resolved as shift
WARNING: shift/reduce conflict for PLUSPLUS in state 144 resolved as shift
WARNING: shift/reduce conflict for MINUSMINUS in state 144 resolved as shift
WARNING: shift/reduce conflict for LBLOCK in state 144 resolved as shift
WARNING: shift/reduce conflict for IF in state 144 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 144 resolved as shift
WARNING: shift/reduce conflict for FOR in state 144 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 144 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 144 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 144 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 145 resolved as shift
WARNING: shift/reduce conflict for COUT in state 145 resolved as shift
WARNING: shift/reduce conflict for CIN in state 145 resolved as shift
WARNING: shift/reduce conflict for ID in state 145 resolved as shift
WARNING: shift/reduce conflict for PLUSPLUS in state 145 resolved as shift
WARNING: shift/reduce conflict for MINUSMINUS in state 145 resolved as shift
WARNING: shift/reduce conflict for LBLOCK in state 145 resolved as shift
WARNING: shift/reduce conflict for IF in state 145 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 145 resolved as shift
WARNING: shift/reduce conflict for FOR in state 145 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 145 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 145 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 145 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 152 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 162 resolved as shift
WARNING: shift/reduce conflict for COUT in state 162 resolved as shift
WARNING: shift/reduce conflict for CIN in state 162 resolved as shift
WARNING: shift/reduce conflict for ID in state 162 resolved as shift
WARNING: shift/reduce conflict for PLUSPLUS in state 162 resolved as shift
WARNING: shift/reduce conflict for MINUSMINUS in state 162 resolved as shift
WARNING: shift/reduce conflict for LBLOCK in state 162 resolved as shift
WARNING: shift/reduce conflict for IF in state 162 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 162 resolved as shift
WARNING: shift/reduce conflict for FOR in state 162 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 162 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 162 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 162 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 175 resolved as shift
WARNING: shift/reduce conflict for COUT in state 175 resolved as shift
WARNING: shift/reduce conflict for CIN in state 175 resolved as shift
WARNING: shift/reduce conflict for ID in state 175 resolved as shift
WARNING: shift/reduce conflict for PLUSPLUS in state 175 resolved as shift
WARNING: shift/reduce conflict for MINUSMINUS in state 175 resolved as shift
WARNING: shift/reduce conflict for LBLOCK in state 175 resolved as shift
WARNING: shift/reduce conflict for IF in state 175 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 175 resolved as shift
WARNING: shift/reduce conflict for FOR in state 175 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 175 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 175 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 175 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 178 resolved as shift
WARNING: shift/reduce conflict for COUT in state 178 resolved as shift
WARNING: shift/reduce conflict for CIN in state 178 resolved as shift
WARNING: shift/reduce conflict for ID in state 178 resolved as shift
WARNING: shift/reduce conflict for PLUSPLUS in state 178 resolved as shift
WARNING: shift/reduce conflict for MINUSMINUS in state 178 resolved as shift
WARNING: shift/reduce conflict for LBLOCK in state 178 resolved as shift
WARNING: shift/reduce conflict for IF in state 178 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 178 resolved as shift
WARNING: shift/reduce conflict for FOR in state 178 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 178 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 178 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 178 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 179 resolved as shift
WARNING: shift/reduce conflict for COUT in state 179 resolved as shift
WARNING: shift/reduce conflict for CIN in state 179 resolved as shift
WARNING: shift/reduce conflict for ID in state 179 resolved as shift
WARNING: shift/reduce conflict for PLUSPLUS in state 179 resolved as shift
WARNING: shift/reduce conflict for MINUSMINUS in state 179 resolved as shift
WARNING: shift/reduce conflict for LBLOCK in state 179 resolved as shift
WARNING: shift/reduce conflict for IF in state 179 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 179 resolved as shift
WARNING: shift/reduce conflict for FOR in state 179 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 179 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 179 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 179 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 181 resolved as shift
WARNING: shift/reduce conflict for COUT in state 181 resolved as shift
WARNING: shift/reduce conflict for CIN in state 181 resolved as shift
WARNING: shift/reduce conflict for ID in state 181 resolved as shift
WARNING: shift/reduce conflict for PLUSPLUS in state 181 resolved as shift
WARNING: shift/reduce conflict for MINUSMINUS in state 181 resolved as shift
WARNING: shift/reduce conflict for LBLOCK in state 181 resolved as shift
WARNING: shift/reduce conflict for IF in state 181 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 181 resolved as shift
WARNING: shift/reduce conflict for FOR in state 181 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 181 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 181 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 181 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 182 resolved as shift
WARNING: shift/reduce conflict for COUT in state 182 resolved as shift
WARNING: shift/reduce conflict for CIN in state 182 resolved as shift
WARNING: shift/reduce conflict for ID in state 182 resolved as shift
WARNING: shift/reduce conflict for PLUSPLUS in state 182 resolved as shift
WARNING: shift/reduce conflict for MINUSMINUS in state 182 resolved as shift
WARNING: shift/reduce conflict for LBLOCK in state 182 resolved as shift
WARNING: shift/reduce conflict for IF in state 182 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 182 resolved as shift
WARNING: shift/reduce conflict for FOR in state 182 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 182 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 182 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 182 resolved as shift
